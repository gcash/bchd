// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: bchrpc.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SlpTokenType int32

const (
	SlpTokenType_VERSION_NOT_SET SlpTokenType = 0
	SlpTokenType_V1_FUNGIBLE     SlpTokenType = 1
	SlpTokenType_V1_NFT1_CHILD   SlpTokenType = 65
	SlpTokenType_V1_NFT1_GROUP   SlpTokenType = 129
)

// Enum value maps for SlpTokenType.
var (
	SlpTokenType_name = map[int32]string{
		0:   "VERSION_NOT_SET",
		1:   "V1_FUNGIBLE",
		65:  "V1_NFT1_CHILD",
		129: "V1_NFT1_GROUP",
	}
	SlpTokenType_value = map[string]int32{
		"VERSION_NOT_SET": 0,
		"V1_FUNGIBLE":     1,
		"V1_NFT1_CHILD":   65,
		"V1_NFT1_GROUP":   129,
	}
)

func (x SlpTokenType) Enum() *SlpTokenType {
	p := new(SlpTokenType)
	*p = x
	return p
}

func (x SlpTokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpTokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[0].Descriptor()
}

func (SlpTokenType) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[0]
}

func (x SlpTokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpTokenType.Descriptor instead.
func (SlpTokenType) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{0}
}

// SlpAction is used to allow clients to identify the type of slp transaction from this single field.
//
// NOTE: All enum types except for "NON_SLP" may be annotated with one or more BurnFlags.
//
type SlpAction int32

const (
	SlpAction_NON_SLP                          SlpAction = 0
	SlpAction_NON_SLP_BURN                     SlpAction = 1
	SlpAction_SLP_PARSE_ERROR                  SlpAction = 2
	SlpAction_SLP_UNSUPPORTED_VERSION          SlpAction = 3
	SlpAction_SLP_V1_GENESIS                   SlpAction = 4
	SlpAction_SLP_V1_MINT                      SlpAction = 5
	SlpAction_SLP_V1_SEND                      SlpAction = 6
	SlpAction_SLP_V1_NFT1_GROUP_GENESIS        SlpAction = 7
	SlpAction_SLP_V1_NFT1_GROUP_MINT           SlpAction = 8
	SlpAction_SLP_V1_NFT1_GROUP_SEND           SlpAction = 9
	SlpAction_SLP_V1_NFT1_UNIQUE_CHILD_GENESIS SlpAction = 10
	SlpAction_SLP_V1_NFT1_UNIQUE_CHILD_SEND    SlpAction = 11
)

// Enum value maps for SlpAction.
var (
	SlpAction_name = map[int32]string{
		0:  "NON_SLP",
		1:  "NON_SLP_BURN",
		2:  "SLP_PARSE_ERROR",
		3:  "SLP_UNSUPPORTED_VERSION",
		4:  "SLP_V1_GENESIS",
		5:  "SLP_V1_MINT",
		6:  "SLP_V1_SEND",
		7:  "SLP_V1_NFT1_GROUP_GENESIS",
		8:  "SLP_V1_NFT1_GROUP_MINT",
		9:  "SLP_V1_NFT1_GROUP_SEND",
		10: "SLP_V1_NFT1_UNIQUE_CHILD_GENESIS",
		11: "SLP_V1_NFT1_UNIQUE_CHILD_SEND",
	}
	SlpAction_value = map[string]int32{
		"NON_SLP":                          0,
		"NON_SLP_BURN":                     1,
		"SLP_PARSE_ERROR":                  2,
		"SLP_UNSUPPORTED_VERSION":          3,
		"SLP_V1_GENESIS":                   4,
		"SLP_V1_MINT":                      5,
		"SLP_V1_SEND":                      6,
		"SLP_V1_NFT1_GROUP_GENESIS":        7,
		"SLP_V1_NFT1_GROUP_MINT":           8,
		"SLP_V1_NFT1_GROUP_SEND":           9,
		"SLP_V1_NFT1_UNIQUE_CHILD_GENESIS": 10,
		"SLP_V1_NFT1_UNIQUE_CHILD_SEND":    11,
	}
)

func (x SlpAction) Enum() *SlpAction {
	p := new(SlpAction)
	*p = x
	return p
}

func (x SlpAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpAction) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[1].Descriptor()
}

func (SlpAction) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[1]
}

func (x SlpAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpAction.Descriptor instead.
func (SlpAction) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{1}
}

// Bitcoin network types
type GetBlockchainInfoResponse_BitcoinNet int32

const (
	// Live public network with monetary value.
	GetBlockchainInfoResponse_MAINNET GetBlockchainInfoResponse_BitcoinNet = 0
	// An isolated environment for automated testing.
	GetBlockchainInfoResponse_REGTEST GetBlockchainInfoResponse_BitcoinNet = 1
	// A public environment where monetary value is agreed to be zero,
	// and some checks for transaction conformity are disabled.
	GetBlockchainInfoResponse_TESTNET3 GetBlockchainInfoResponse_BitcoinNet = 2
	// Private testnets for large scale simulations (or stress testing),
	// where a specified list of nodes is used, rather than node discovery.
	GetBlockchainInfoResponse_SIMNET GetBlockchainInfoResponse_BitcoinNet = 3
)

// Enum value maps for GetBlockchainInfoResponse_BitcoinNet.
var (
	GetBlockchainInfoResponse_BitcoinNet_name = map[int32]string{
		0: "MAINNET",
		1: "REGTEST",
		2: "TESTNET3",
		3: "SIMNET",
	}
	GetBlockchainInfoResponse_BitcoinNet_value = map[string]int32{
		"MAINNET":  0,
		"REGTEST":  1,
		"TESTNET3": 2,
		"SIMNET":   3,
	}
)

func (x GetBlockchainInfoResponse_BitcoinNet) Enum() *GetBlockchainInfoResponse_BitcoinNet {
	p := new(GetBlockchainInfoResponse_BitcoinNet)
	*p = x
	return p
}

func (x GetBlockchainInfoResponse_BitcoinNet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBlockchainInfoResponse_BitcoinNet) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[2].Descriptor()
}

func (GetBlockchainInfoResponse_BitcoinNet) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[2]
}

func (x GetBlockchainInfoResponse_BitcoinNet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBlockchainInfoResponse_BitcoinNet.Descriptor instead.
func (GetBlockchainInfoResponse_BitcoinNet) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{5, 0}
}

// State of the block in relation to the chain.
type BlockNotification_Type int32

const (
	BlockNotification_CONNECTED    BlockNotification_Type = 0
	BlockNotification_DISCONNECTED BlockNotification_Type = 1
)

// Enum value maps for BlockNotification_Type.
var (
	BlockNotification_Type_name = map[int32]string{
		0: "CONNECTED",
		1: "DISCONNECTED",
	}
	BlockNotification_Type_value = map[string]int32{
		"CONNECTED":    0,
		"DISCONNECTED": 1,
	}
)

func (x BlockNotification_Type) Enum() *BlockNotification_Type {
	p := new(BlockNotification_Type)
	*p = x
	return p
}

func (x BlockNotification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlockNotification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[3].Descriptor()
}

func (BlockNotification_Type) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[3]
}

func (x BlockNotification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlockNotification_Type.Descriptor instead.
func (BlockNotification_Type) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{44, 0}
}

// State of the transaction acceptance.
type TransactionNotification_Type int32

const (
	// A transaction in mempool.
	TransactionNotification_UNCONFIRMED TransactionNotification_Type = 0
	// A transaction in a block.
	TransactionNotification_CONFIRMED TransactionNotification_Type = 1
)

// Enum value maps for TransactionNotification_Type.
var (
	TransactionNotification_Type_name = map[int32]string{
		0: "UNCONFIRMED",
		1: "CONFIRMED",
	}
	TransactionNotification_Type_value = map[string]int32{
		"UNCONFIRMED": 0,
		"CONFIRMED":   1,
	}
)

func (x TransactionNotification_Type) Enum() *TransactionNotification_Type {
	p := new(TransactionNotification_Type)
	*p = x
	return p
}

func (x TransactionNotification_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionNotification_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[4].Descriptor()
}

func (TransactionNotification_Type) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[4]
}

func (x TransactionNotification_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionNotification_Type.Descriptor instead.
func (TransactionNotification_Type) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{45, 0}
}

type SlpTransactionInfo_ValidityJudgement int32

const (
	SlpTransactionInfo_UNKNOWN_OR_INVALID SlpTransactionInfo_ValidityJudgement = 0
	SlpTransactionInfo_VALID              SlpTransactionInfo_ValidityJudgement = 1
)

// Enum value maps for SlpTransactionInfo_ValidityJudgement.
var (
	SlpTransactionInfo_ValidityJudgement_name = map[int32]string{
		0: "UNKNOWN_OR_INVALID",
		1: "VALID",
	}
	SlpTransactionInfo_ValidityJudgement_value = map[string]int32{
		"UNKNOWN_OR_INVALID": 0,
		"VALID":              1,
	}
)

func (x SlpTransactionInfo_ValidityJudgement) Enum() *SlpTransactionInfo_ValidityJudgement {
	p := new(SlpTransactionInfo_ValidityJudgement)
	*p = x
	return p
}

func (x SlpTransactionInfo_ValidityJudgement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpTransactionInfo_ValidityJudgement) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[5].Descriptor()
}

func (SlpTransactionInfo_ValidityJudgement) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[5]
}

func (x SlpTransactionInfo_ValidityJudgement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpTransactionInfo_ValidityJudgement.Descriptor instead.
func (SlpTransactionInfo_ValidityJudgement) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{53, 0}
}

type SlpTransactionInfo_BurnFlags int32

const (
	SlpTransactionInfo_BURNED_INPUTS_OUTPUTS_TOO_HIGH     SlpTransactionInfo_BurnFlags = 0
	SlpTransactionInfo_BURNED_INPUTS_BAD_OPRETURN         SlpTransactionInfo_BurnFlags = 1
	SlpTransactionInfo_BURNED_INPUTS_OTHER_TOKEN          SlpTransactionInfo_BurnFlags = 2
	SlpTransactionInfo_BURNED_OUTPUTS_MISSING_BCH_VOUT    SlpTransactionInfo_BurnFlags = 3
	SlpTransactionInfo_BURNED_INPUTS_GREATER_THAN_OUTPUTS SlpTransactionInfo_BurnFlags = 4
)

// Enum value maps for SlpTransactionInfo_BurnFlags.
var (
	SlpTransactionInfo_BurnFlags_name = map[int32]string{
		0: "BURNED_INPUTS_OUTPUTS_TOO_HIGH",
		1: "BURNED_INPUTS_BAD_OPRETURN",
		2: "BURNED_INPUTS_OTHER_TOKEN",
		3: "BURNED_OUTPUTS_MISSING_BCH_VOUT",
		4: "BURNED_INPUTS_GREATER_THAN_OUTPUTS",
	}
	SlpTransactionInfo_BurnFlags_value = map[string]int32{
		"BURNED_INPUTS_OUTPUTS_TOO_HIGH":     0,
		"BURNED_INPUTS_BAD_OPRETURN":         1,
		"BURNED_INPUTS_OTHER_TOKEN":          2,
		"BURNED_OUTPUTS_MISSING_BCH_VOUT":    3,
		"BURNED_INPUTS_GREATER_THAN_OUTPUTS": 4,
	}
)

func (x SlpTransactionInfo_BurnFlags) Enum() *SlpTransactionInfo_BurnFlags {
	p := new(SlpTransactionInfo_BurnFlags)
	*p = x
	return p
}

func (x SlpTransactionInfo_BurnFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlpTransactionInfo_BurnFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_bchrpc_proto_enumTypes[6].Descriptor()
}

func (SlpTransactionInfo_BurnFlags) Type() protoreflect.EnumType {
	return &file_bchrpc_proto_enumTypes[6]
}

func (x SlpTransactionInfo_BurnFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlpTransactionInfo_BurnFlags.Descriptor instead.
func (SlpTransactionInfo_BurnFlags) EnumDescriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{53, 1}
}

type GetMempoolInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMempoolInfoRequest) Reset() {
	*x = GetMempoolInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolInfoRequest) ProtoMessage() {}

func (x *GetMempoolInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolInfoRequest.ProtoReflect.Descriptor instead.
func (*GetMempoolInfoRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{0}
}

type GetMempoolInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The count of transactions in the mempool
	Size uint32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// The size in bytes of all transactions in the mempool
	Bytes uint32 `protobuf:"varint,2,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *GetMempoolInfoResponse) Reset() {
	*x = GetMempoolInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolInfoResponse) ProtoMessage() {}

func (x *GetMempoolInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolInfoResponse.ProtoReflect.Descriptor instead.
func (*GetMempoolInfoResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetMempoolInfoResponse) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *GetMempoolInfoResponse) GetBytes() uint32 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type GetMempoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When `full_transactions` is true, full transaction data is provided
	// instead of just transaction hashes. Default is false.
	FullTransactions bool `protobuf:"varint,1,opt,name=full_transactions,json=fullTransactions,proto3" json:"full_transactions,omitempty"`
}

func (x *GetMempoolRequest) Reset() {
	*x = GetMempoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolRequest) ProtoMessage() {}

func (x *GetMempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolRequest.ProtoReflect.Descriptor instead.
func (*GetMempoolRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetMempoolRequest) GetFullTransactions() bool {
	if x != nil {
		return x.FullTransactions
	}
	return false
}

type GetMempoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of unconfirmed transactions.
	TransactionData []*GetMempoolResponse_TransactionData `protobuf:"bytes,1,rep,name=transaction_data,json=transactionData,proto3" json:"transaction_data,omitempty"`
}

func (x *GetMempoolResponse) Reset() {
	*x = GetMempoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolResponse) ProtoMessage() {}

func (x *GetMempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolResponse.ProtoReflect.Descriptor instead.
func (*GetMempoolResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetMempoolResponse) GetTransactionData() []*GetMempoolResponse_TransactionData {
	if x != nil {
		return x.TransactionData
	}
	return nil
}

type GetBlockchainInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetBlockchainInfoRequest) Reset() {
	*x = GetBlockchainInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoRequest) ProtoMessage() {}

func (x *GetBlockchainInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{4}
}

type GetBlockchainInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which network the node is operating on.
	BitcoinNet GetBlockchainInfoResponse_BitcoinNet `protobuf:"varint,1,opt,name=bitcoin_net,json=bitcoinNet,proto3,enum=pb.GetBlockchainInfoResponse_BitcoinNet" json:"bitcoin_net,omitempty"`
	// The current number of blocks on the longest chain.
	BestHeight int32 `protobuf:"varint,2,opt,name=best_height,json=bestHeight,proto3" json:"best_height,omitempty"`
	// The hash of the best (tip) block in the most-work fully-validated chain, little-endian.
	BestBlockHash []byte `protobuf:"bytes,3,opt,name=best_block_hash,json=bestBlockHash,proto3" json:"best_block_hash,omitempty"`
	// Threshold for adding new blocks.
	Difficulty float64 `protobuf:"fixed64,4,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	// Median time of the last 11 blocks.
	MedianTime int64 `protobuf:"varint,5,opt,name=median_time,json=medianTime,proto3" json:"median_time,omitempty"`
	// When `tx_index` is true, the node has full transaction index enabled.
	TxIndex bool `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	// When `addr_index` is true, the node has address index enabled and may
	// be used with call related by address.
	AddrIndex bool `protobuf:"varint,7,opt,name=addr_index,json=addrIndex,proto3" json:"addr_index,omitempty"`
	// When `slp_index` is true, the node has the slp index enabled and may
	// be used with slp related rpc methods and also causes slp metadata to be added
	// in some of the existing rpc methods.
	SlpIndex bool `protobuf:"varint,8,opt,name=slp_index,json=slpIndex,proto3" json:"slp_index,omitempty"`
	// When `slp_graphsearch` is true, the node is able to handle calls to slp graph search
	SlpGraphsearch bool `protobuf:"varint,9,opt,name=slp_graphsearch,json=slpGraphsearch,proto3" json:"slp_graphsearch,omitempty"`
}

func (x *GetBlockchainInfoResponse) Reset() {
	*x = GetBlockchainInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockchainInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockchainInfoResponse) ProtoMessage() {}

func (x *GetBlockchainInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockchainInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockchainInfoResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetBlockchainInfoResponse) GetBitcoinNet() GetBlockchainInfoResponse_BitcoinNet {
	if x != nil {
		return x.BitcoinNet
	}
	return GetBlockchainInfoResponse_MAINNET
}

func (x *GetBlockchainInfoResponse) GetBestHeight() int32 {
	if x != nil {
		return x.BestHeight
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetBestBlockHash() []byte {
	if x != nil {
		return x.BestBlockHash
	}
	return nil
}

func (x *GetBlockchainInfoResponse) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetMedianTime() int64 {
	if x != nil {
		return x.MedianTime
	}
	return 0
}

func (x *GetBlockchainInfoResponse) GetTxIndex() bool {
	if x != nil {
		return x.TxIndex
	}
	return false
}

func (x *GetBlockchainInfoResponse) GetAddrIndex() bool {
	if x != nil {
		return x.AddrIndex
	}
	return false
}

func (x *GetBlockchainInfoResponse) GetSlpIndex() bool {
	if x != nil {
		return x.SlpIndex
	}
	return false
}

func (x *GetBlockchainInfoResponse) GetSlpGraphsearch() bool {
	if x != nil {
		return x.SlpGraphsearch
	}
	return false
}

type GetBlockInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashOrHeight:
	//	*GetBlockInfoRequest_Hash
	//	*GetBlockInfoRequest_Height
	HashOrHeight isGetBlockInfoRequest_HashOrHeight `protobuf_oneof:"hash_or_height"`
}

func (x *GetBlockInfoRequest) Reset() {
	*x = GetBlockInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoRequest) ProtoMessage() {}

func (x *GetBlockInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoRequest.ProtoReflect.Descriptor instead.
func (*GetBlockInfoRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{6}
}

func (m *GetBlockInfoRequest) GetHashOrHeight() isGetBlockInfoRequest_HashOrHeight {
	if m != nil {
		return m.HashOrHeight
	}
	return nil
}

func (x *GetBlockInfoRequest) GetHash() []byte {
	if x, ok := x.GetHashOrHeight().(*GetBlockInfoRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetBlockInfoRequest) GetHeight() int32 {
	if x, ok := x.GetHashOrHeight().(*GetBlockInfoRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetBlockInfoRequest_HashOrHeight interface {
	isGetBlockInfoRequest_HashOrHeight()
}

type GetBlockInfoRequest_Hash struct {
	// The block hash as a byte array or base64 encoded string, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}

type GetBlockInfoRequest_Height struct {
	// The block number.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetBlockInfoRequest_Hash) isGetBlockInfoRequest_HashOrHeight() {}

func (*GetBlockInfoRequest_Height) isGetBlockInfoRequest_HashOrHeight() {}

type GetBlockInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Marshaled block header data, as well as metadata.
	Info *BlockInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *GetBlockInfoResponse) Reset() {
	*x = GetBlockInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockInfoResponse) ProtoMessage() {}

func (x *GetBlockInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockInfoResponse.ProtoReflect.Descriptor instead.
func (*GetBlockInfoResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetBlockInfoResponse) GetInfo() *BlockInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashOrHeight:
	//	*GetBlockRequest_Hash
	//	*GetBlockRequest_Height
	HashOrHeight isGetBlockRequest_HashOrHeight `protobuf_oneof:"hash_or_height"`
	// When `full_transactions` is true, full transactions are returned
	// instead of just hashes. Default is false.
	FullTransactions bool `protobuf:"varint,3,opt,name=full_transactions,json=fullTransactions,proto3" json:"full_transactions,omitempty"`
}

func (x *GetBlockRequest) Reset() {
	*x = GetBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockRequest) ProtoMessage() {}

func (x *GetBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockRequest.ProtoReflect.Descriptor instead.
func (*GetBlockRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{8}
}

func (m *GetBlockRequest) GetHashOrHeight() isGetBlockRequest_HashOrHeight {
	if m != nil {
		return m.HashOrHeight
	}
	return nil
}

func (x *GetBlockRequest) GetHash() []byte {
	if x, ok := x.GetHashOrHeight().(*GetBlockRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetBlockRequest) GetHeight() int32 {
	if x, ok := x.GetHashOrHeight().(*GetBlockRequest_Height); ok {
		return x.Height
	}
	return 0
}

func (x *GetBlockRequest) GetFullTransactions() bool {
	if x != nil {
		return x.FullTransactions
	}
	return false
}

type isGetBlockRequest_HashOrHeight interface {
	isGetBlockRequest_HashOrHeight()
}

type GetBlockRequest_Hash struct {
	// The block hash as a byte array or base64 encoded string, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}

type GetBlockRequest_Height struct {
	// The block number.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetBlockRequest_Hash) isGetBlockRequest_HashOrHeight() {}

func (*GetBlockRequest_Height) isGetBlockRequest_HashOrHeight() {}

type GetBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A marshaled block.
	Block *Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetBlockResponse) Reset() {
	*x = GetBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockResponse) ProtoMessage() {}

func (x *GetBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockResponse.ProtoReflect.Descriptor instead.
func (*GetBlockResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetBlockResponse) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetRawBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashOrHeight:
	//	*GetRawBlockRequest_Hash
	//	*GetRawBlockRequest_Height
	HashOrHeight isGetRawBlockRequest_HashOrHeight `protobuf_oneof:"hash_or_height"`
}

func (x *GetRawBlockRequest) Reset() {
	*x = GetRawBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlockRequest) ProtoMessage() {}

func (x *GetRawBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlockRequest.ProtoReflect.Descriptor instead.
func (*GetRawBlockRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{10}
}

func (m *GetRawBlockRequest) GetHashOrHeight() isGetRawBlockRequest_HashOrHeight {
	if m != nil {
		return m.HashOrHeight
	}
	return nil
}

func (x *GetRawBlockRequest) GetHash() []byte {
	if x, ok := x.GetHashOrHeight().(*GetRawBlockRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetRawBlockRequest) GetHeight() int32 {
	if x, ok := x.GetHashOrHeight().(*GetRawBlockRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetRawBlockRequest_HashOrHeight interface {
	isGetRawBlockRequest_HashOrHeight()
}

type GetRawBlockRequest_Hash struct {
	// The block hash as a byte array or base64 encoded string, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}

type GetRawBlockRequest_Height struct {
	// The block number.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetRawBlockRequest_Hash) isGetRawBlockRequest_HashOrHeight() {}

func (*GetRawBlockRequest_Height) isGetRawBlockRequest_HashOrHeight() {}

type GetRawBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw block data (with header) serialized according the the bitcoin block protocol.
	Block []byte `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *GetRawBlockResponse) Reset() {
	*x = GetRawBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawBlockResponse) ProtoMessage() {}

func (x *GetRawBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawBlockResponse.ProtoReflect.Descriptor instead.
func (*GetRawBlockResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetRawBlockResponse) GetBlock() []byte {
	if x != nil {
		return x.Block
	}
	return nil
}

type GetBlockFilterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashOrHeight:
	//	*GetBlockFilterRequest_Hash
	//	*GetBlockFilterRequest_Height
	HashOrHeight isGetBlockFilterRequest_HashOrHeight `protobuf_oneof:"hash_or_height"`
}

func (x *GetBlockFilterRequest) Reset() {
	*x = GetBlockFilterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFilterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFilterRequest) ProtoMessage() {}

func (x *GetBlockFilterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFilterRequest.ProtoReflect.Descriptor instead.
func (*GetBlockFilterRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{12}
}

func (m *GetBlockFilterRequest) GetHashOrHeight() isGetBlockFilterRequest_HashOrHeight {
	if m != nil {
		return m.HashOrHeight
	}
	return nil
}

func (x *GetBlockFilterRequest) GetHash() []byte {
	if x, ok := x.GetHashOrHeight().(*GetBlockFilterRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetBlockFilterRequest) GetHeight() int32 {
	if x, ok := x.GetHashOrHeight().(*GetBlockFilterRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetBlockFilterRequest_HashOrHeight interface {
	isGetBlockFilterRequest_HashOrHeight()
}

type GetBlockFilterRequest_Hash struct {
	// The block hash as a byte array or base64 encoded string, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}

type GetBlockFilterRequest_Height struct {
	// The block number.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3,oneof"`
}

func (*GetBlockFilterRequest_Hash) isGetBlockFilterRequest_HashOrHeight() {}

func (*GetBlockFilterRequest_Height) isGetBlockFilterRequest_HashOrHeight() {}

type GetBlockFilterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A compact filter matching input outpoints and public key scripts contained
	// in a block (encoded according to BIP158).
	Filter []byte `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *GetBlockFilterResponse) Reset() {
	*x = GetBlockFilterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlockFilterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlockFilterResponse) ProtoMessage() {}

func (x *GetBlockFilterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlockFilterResponse.ProtoReflect.Descriptor instead.
func (*GetBlockFilterResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetBlockFilterResponse) GetFilter() []byte {
	if x != nil {
		return x.Filter
	}
	return nil
}

// Request headers using a list of known block hashes.
type GetHeadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of block hashes known to the client (most recent first) which
	// is exponentially sparser toward the genesis block (0), little-endian.
	// Common practice is to include all of the last 10 blocks, and then
	// 9 blocks for each order of ten thereafter.
	BlockLocatorHashes [][]byte `protobuf:"bytes,1,rep,name=block_locator_hashes,json=blockLocatorHashes,proto3" json:"block_locator_hashes,omitempty"`
	// hash of the latest desired block header, little-endian; only blocks
	// occurring before the stop will be returned.
	StopHash []byte `protobuf:"bytes,2,opt,name=stop_hash,json=stopHash,proto3" json:"stop_hash,omitempty"`
}

func (x *GetHeadersRequest) Reset() {
	*x = GetHeadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadersRequest) ProtoMessage() {}

func (x *GetHeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadersRequest.ProtoReflect.Descriptor instead.
func (*GetHeadersRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetHeadersRequest) GetBlockLocatorHashes() [][]byte {
	if x != nil {
		return x.BlockLocatorHashes
	}
	return nil
}

func (x *GetHeadersRequest) GetStopHash() []byte {
	if x != nil {
		return x.StopHash
	}
	return nil
}

type GetHeadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of block headers.
	Headers []*BlockInfo `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty"`
}

func (x *GetHeadersResponse) Reset() {
	*x = GetHeadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadersResponse) ProtoMessage() {}

func (x *GetHeadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadersResponse.ProtoReflect.Descriptor instead.
func (*GetHeadersResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetHeadersResponse) GetHeaders() []*BlockInfo {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Get a transaction from a transaction hash.
type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction hash, little-endian.
	Hash                 []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	IncludeTokenMetadata bool   `protobuf:"varint,2,opt,name=include_token_metadata,json=includeTokenMetadata,proto3" json:"include_token_metadata,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{16}
}

func (x *GetTransactionRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetTransactionRequest) GetIncludeTokenMetadata() bool {
	if x != nil {
		return x.IncludeTokenMetadata
	}
	return false
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A marshaled transaction.
	Transaction   *Transaction      `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	TokenMetadata *SlpTokenMetadata `protobuf:"bytes,2,opt,name=token_metadata,json=tokenMetadata,proto3" json:"token_metadata,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetTransactionResponse) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *GetTransactionResponse) GetTokenMetadata() *SlpTokenMetadata {
	if x != nil {
		return x.TokenMetadata
	}
	return nil
}

// Get an encoded transaction from a transaction hash.
type GetRawTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction hash, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *GetRawTransactionRequest) Reset() {
	*x = GetRawTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionRequest) ProtoMessage() {}

func (x *GetRawTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetRawTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{18}
}

func (x *GetRawTransactionRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetRawTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw transaction in bytes.
	Transaction []byte `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetRawTransactionResponse) Reset() {
	*x = GetRawTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawTransactionResponse) ProtoMessage() {}

func (x *GetRawTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetRawTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{19}
}

func (x *GetRawTransactionResponse) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

// Get marshaled transactions related to a specific address.
//
// RECOMMENDED:
// Parameters have been provided to query without creating
//   performance issues on the node or client.
//
// - The number of transactions to skip and fetch allow for iterating
//       over a large set of transactions, if necessary.
//
// - A starting block parameter (either `hash` or `height`)
//       may then be used to filter results to those occurring
//       after a certain time.
//
// This approach will reduce network traffic and response processing
//   for the client, as well as reduce workload on the node.
type GetAddressTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to query transactions, in lowercase cashaddr format.
	// The network prefix is optional (i.e. "cashaddress:").
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The number of confirmed transactions to skip, starting with the oldest first.
	// Does not affect results of unconfirmed transactions.
	NbSkip uint32 `protobuf:"varint,2,opt,name=nb_skip,json=nbSkip,proto3" json:"nb_skip,omitempty"`
	// Specify the number of transactions to fetch.
	NbFetch uint32 `protobuf:"varint,3,opt,name=nb_fetch,json=nbFetch,proto3" json:"nb_fetch,omitempty"`
	// Types that are assignable to StartBlock:
	//	*GetAddressTransactionsRequest_Hash
	//	*GetAddressTransactionsRequest_Height
	StartBlock isGetAddressTransactionsRequest_StartBlock `protobuf_oneof:"start_block"`
}

func (x *GetAddressTransactionsRequest) Reset() {
	*x = GetAddressTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressTransactionsRequest) ProtoMessage() {}

func (x *GetAddressTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetAddressTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{20}
}

func (x *GetAddressTransactionsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAddressTransactionsRequest) GetNbSkip() uint32 {
	if x != nil {
		return x.NbSkip
	}
	return 0
}

func (x *GetAddressTransactionsRequest) GetNbFetch() uint32 {
	if x != nil {
		return x.NbFetch
	}
	return 0
}

func (m *GetAddressTransactionsRequest) GetStartBlock() isGetAddressTransactionsRequest_StartBlock {
	if m != nil {
		return m.StartBlock
	}
	return nil
}

func (x *GetAddressTransactionsRequest) GetHash() []byte {
	if x, ok := x.GetStartBlock().(*GetAddressTransactionsRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetAddressTransactionsRequest) GetHeight() int32 {
	if x, ok := x.GetStartBlock().(*GetAddressTransactionsRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetAddressTransactionsRequest_StartBlock interface {
	isGetAddressTransactionsRequest_StartBlock()
}

type GetAddressTransactionsRequest_Hash struct {
	// Recommended. Only get transactions after (or within) a
	// starting block identified by hash, little-endian.
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3,oneof"`
}

type GetAddressTransactionsRequest_Height struct {
	// Recommended. Only get transactions after (or within) a
	// starting block identified by block number.
	Height int32 `protobuf:"varint,5,opt,name=height,proto3,oneof"`
}

func (*GetAddressTransactionsRequest_Hash) isGetAddressTransactionsRequest_StartBlock() {}

func (*GetAddressTransactionsRequest_Height) isGetAddressTransactionsRequest_StartBlock() {}

type GetAddressTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transactions that have been included in a block.
	ConfirmedTransactions []*Transaction `protobuf:"bytes,1,rep,name=confirmed_transactions,json=confirmedTransactions,proto3" json:"confirmed_transactions,omitempty"`
	// Transactions in mempool which have not been included in a block.
	UnconfirmedTransactions []*MempoolTransaction `protobuf:"bytes,2,rep,name=unconfirmed_transactions,json=unconfirmedTransactions,proto3" json:"unconfirmed_transactions,omitempty"`
}

func (x *GetAddressTransactionsResponse) Reset() {
	*x = GetAddressTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressTransactionsResponse) ProtoMessage() {}

func (x *GetAddressTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetAddressTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{21}
}

func (x *GetAddressTransactionsResponse) GetConfirmedTransactions() []*Transaction {
	if x != nil {
		return x.ConfirmedTransactions
	}
	return nil
}

func (x *GetAddressTransactionsResponse) GetUnconfirmedTransactions() []*MempoolTransaction {
	if x != nil {
		return x.UnconfirmedTransactions
	}
	return nil
}

// Get encoded transactions related to a specific address.
//
// RECOMMENDED:
// Parameters have been provided to query without creating
//   performance issues on the node or client.
//
// - The number of transactions to skip and fetch allow for iterating
//       over a large set of transactions, if necessary.
//
// - A starting block parameter (either `hash` or `height`)
//       may then be used to filter results to those occurring
//       after a certain time.
//
// This approach will reduce network traffic and response processing
//   for the client, as well as reduce workload on the node.
type GetRawAddressTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to query transactions, in lowercase cashaddr format.
	// The network prefix is optional (i.e. "cashaddress:").
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The number of confirmed transactions to skip, starting with the oldest first.
	// Does not affect results of unconfirmed transactions.
	NbSkip uint32 `protobuf:"varint,2,opt,name=nb_skip,json=nbSkip,proto3" json:"nb_skip,omitempty"`
	// Specify the number of transactions to fetch.
	NbFetch uint32 `protobuf:"varint,3,opt,name=nb_fetch,json=nbFetch,proto3" json:"nb_fetch,omitempty"`
	// Types that are assignable to StartBlock:
	//	*GetRawAddressTransactionsRequest_Hash
	//	*GetRawAddressTransactionsRequest_Height
	StartBlock isGetRawAddressTransactionsRequest_StartBlock `protobuf_oneof:"start_block"`
}

func (x *GetRawAddressTransactionsRequest) Reset() {
	*x = GetRawAddressTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawAddressTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawAddressTransactionsRequest) ProtoMessage() {}

func (x *GetRawAddressTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawAddressTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetRawAddressTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{22}
}

func (x *GetRawAddressTransactionsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetRawAddressTransactionsRequest) GetNbSkip() uint32 {
	if x != nil {
		return x.NbSkip
	}
	return 0
}

func (x *GetRawAddressTransactionsRequest) GetNbFetch() uint32 {
	if x != nil {
		return x.NbFetch
	}
	return 0
}

func (m *GetRawAddressTransactionsRequest) GetStartBlock() isGetRawAddressTransactionsRequest_StartBlock {
	if m != nil {
		return m.StartBlock
	}
	return nil
}

func (x *GetRawAddressTransactionsRequest) GetHash() []byte {
	if x, ok := x.GetStartBlock().(*GetRawAddressTransactionsRequest_Hash); ok {
		return x.Hash
	}
	return nil
}

func (x *GetRawAddressTransactionsRequest) GetHeight() int32 {
	if x, ok := x.GetStartBlock().(*GetRawAddressTransactionsRequest_Height); ok {
		return x.Height
	}
	return 0
}

type isGetRawAddressTransactionsRequest_StartBlock interface {
	isGetRawAddressTransactionsRequest_StartBlock()
}

type GetRawAddressTransactionsRequest_Hash struct {
	// Recommended. Only return transactions after some starting block
	// identified by hash, little-endian.
	Hash []byte `protobuf:"bytes,4,opt,name=hash,proto3,oneof"`
}

type GetRawAddressTransactionsRequest_Height struct {
	// Recommended. Only return transactions after some starting block
	// identified by block number.
	Height int32 `protobuf:"varint,5,opt,name=height,proto3,oneof"`
}

func (*GetRawAddressTransactionsRequest_Hash) isGetRawAddressTransactionsRequest_StartBlock() {}

func (*GetRawAddressTransactionsRequest_Height) isGetRawAddressTransactionsRequest_StartBlock() {}

type GetRawAddressTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transactions that have been included in a block.
	ConfirmedTransactions [][]byte `protobuf:"bytes,1,rep,name=confirmed_transactions,json=confirmedTransactions,proto3" json:"confirmed_transactions,omitempty"`
	// Transactions in mempool which have not been included in a block.
	UnconfirmedTransactions [][]byte `protobuf:"bytes,2,rep,name=unconfirmed_transactions,json=unconfirmedTransactions,proto3" json:"unconfirmed_transactions,omitempty"`
}

func (x *GetRawAddressTransactionsResponse) Reset() {
	*x = GetRawAddressTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRawAddressTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRawAddressTransactionsResponse) ProtoMessage() {}

func (x *GetRawAddressTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRawAddressTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetRawAddressTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{23}
}

func (x *GetRawAddressTransactionsResponse) GetConfirmedTransactions() [][]byte {
	if x != nil {
		return x.ConfirmedTransactions
	}
	return nil
}

func (x *GetRawAddressTransactionsResponse) GetUnconfirmedTransactions() [][]byte {
	if x != nil {
		return x.UnconfirmedTransactions
	}
	return nil
}

type GetAddressUnspentOutputsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address to query transactions, in lowercase cashaddr format.
	// The network identifier is optional (i.e. "cashaddress:").
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// When `include_mempool` is true, unconfirmed transactions from mempool
	// are returned. Default is false.
	IncludeMempool       bool `protobuf:"varint,2,opt,name=include_mempool,json=includeMempool,proto3" json:"include_mempool,omitempty"`
	IncludeTokenMetadata bool `protobuf:"varint,3,opt,name=include_token_metadata,json=includeTokenMetadata,proto3" json:"include_token_metadata,omitempty"`
}

func (x *GetAddressUnspentOutputsRequest) Reset() {
	*x = GetAddressUnspentOutputsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressUnspentOutputsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressUnspentOutputsRequest) ProtoMessage() {}

func (x *GetAddressUnspentOutputsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressUnspentOutputsRequest.ProtoReflect.Descriptor instead.
func (*GetAddressUnspentOutputsRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{24}
}

func (x *GetAddressUnspentOutputsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetAddressUnspentOutputsRequest) GetIncludeMempool() bool {
	if x != nil {
		return x.IncludeMempool
	}
	return false
}

func (x *GetAddressUnspentOutputsRequest) GetIncludeTokenMetadata() bool {
	if x != nil {
		return x.IncludeTokenMetadata
	}
	return false
}

type GetAddressUnspentOutputsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of unspent outputs.
	Outputs       []*UnspentOutput    `protobuf:"bytes,1,rep,name=outputs,proto3" json:"outputs,omitempty"`
	TokenMetadata []*SlpTokenMetadata `protobuf:"bytes,2,rep,name=token_metadata,json=tokenMetadata,proto3" json:"token_metadata,omitempty"`
}

func (x *GetAddressUnspentOutputsResponse) Reset() {
	*x = GetAddressUnspentOutputsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressUnspentOutputsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressUnspentOutputsResponse) ProtoMessage() {}

func (x *GetAddressUnspentOutputsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressUnspentOutputsResponse.ProtoReflect.Descriptor instead.
func (*GetAddressUnspentOutputsResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetAddressUnspentOutputsResponse) GetOutputs() []*UnspentOutput {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *GetAddressUnspentOutputsResponse) GetTokenMetadata() []*SlpTokenMetadata {
	if x != nil {
		return x.TokenMetadata
	}
	return nil
}

type GetUnspentOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The number of the output, starting from zero.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// When include_mempool is true, unconfirmed transactions from mempool
	// are returned. Default is false.
	IncludeMempool       bool `protobuf:"varint,3,opt,name=include_mempool,json=includeMempool,proto3" json:"include_mempool,omitempty"`
	IncludeTokenMetadata bool `protobuf:"varint,4,opt,name=include_token_metadata,json=includeTokenMetadata,proto3" json:"include_token_metadata,omitempty"`
}

func (x *GetUnspentOutputRequest) Reset() {
	*x = GetUnspentOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnspentOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnspentOutputRequest) ProtoMessage() {}

func (x *GetUnspentOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnspentOutputRequest.ProtoReflect.Descriptor instead.
func (*GetUnspentOutputRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{26}
}

func (x *GetUnspentOutputRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetUnspentOutputRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GetUnspentOutputRequest) GetIncludeMempool() bool {
	if x != nil {
		return x.IncludeMempool
	}
	return false
}

func (x *GetUnspentOutputRequest) GetIncludeTokenMetadata() bool {
	if x != nil {
		return x.IncludeTokenMetadata
	}
	return false
}

type GetUnspentOutputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference to the related input.
	Outpoint *Transaction_Input_Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// Locking script dictating how funds can be spent in the future
	PubkeyScript []byte `protobuf:"bytes,2,opt,name=pubkey_script,json=pubkeyScript,proto3" json:"pubkey_script,omitempty"`
	// Amount in satoshi.
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// When is_coinbase is true, the transaction was the first in a block,
	// created by a miner, and used to pay the block reward
	IsCoinbase bool `protobuf:"varint,4,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	// The index number of the block containing the transaction creating the output.
	BlockHeight   int32             `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SlpToken      *SlpToken         `protobuf:"bytes,6,opt,name=slp_token,json=slpToken,proto3" json:"slp_token,omitempty"`
	TokenMetadata *SlpTokenMetadata `protobuf:"bytes,7,opt,name=token_metadata,json=tokenMetadata,proto3" json:"token_metadata,omitempty"`
}

func (x *GetUnspentOutputResponse) Reset() {
	*x = GetUnspentOutputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUnspentOutputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUnspentOutputResponse) ProtoMessage() {}

func (x *GetUnspentOutputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUnspentOutputResponse.ProtoReflect.Descriptor instead.
func (*GetUnspentOutputResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{27}
}

func (x *GetUnspentOutputResponse) GetOutpoint() *Transaction_Input_Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *GetUnspentOutputResponse) GetPubkeyScript() []byte {
	if x != nil {
		return x.PubkeyScript
	}
	return nil
}

func (x *GetUnspentOutputResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *GetUnspentOutputResponse) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *GetUnspentOutputResponse) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *GetUnspentOutputResponse) GetSlpToken() *SlpToken {
	if x != nil {
		return x.SlpToken
	}
	return nil
}

func (x *GetUnspentOutputResponse) GetTokenMetadata() *SlpTokenMetadata {
	if x != nil {
		return x.TokenMetadata
	}
	return nil
}

type GetMerkleProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A transaction hash, little-endian.
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
}

func (x *GetMerkleProofRequest) Reset() {
	*x = GetMerkleProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleProofRequest) ProtoMessage() {}

func (x *GetMerkleProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleProofRequest.ProtoReflect.Descriptor instead.
func (*GetMerkleProofRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{28}
}

func (x *GetMerkleProofRequest) GetTransactionHash() []byte {
	if x != nil {
		return x.TransactionHash
	}
	return nil
}

type GetMerkleProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block header information for the corresponding transaction
	Block *BlockInfo `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	// A list containing the transaction hash, the adjacent leaf transaction hash
	// and the hashes of the highest nodes in the merkle tree not built with the transaction.
	// Proof hashes are ordered following transaction order, or left to right on the merkle tree
	Hashes [][]byte `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`
	// Binary representing the location of the matching transaction in the full merkle tree,
	// starting with the root (`1`) at position/level 0, where `1` corresponds
	// to a left branch and `01` is a right branch.
	Flags []byte `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *GetMerkleProofResponse) Reset() {
	*x = GetMerkleProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMerkleProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMerkleProofResponse) ProtoMessage() {}

func (x *GetMerkleProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMerkleProofResponse.ProtoReflect.Descriptor instead.
func (*GetMerkleProofResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{29}
}

func (x *GetMerkleProofResponse) GetBlock() *BlockInfo {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *GetMerkleProofResponse) GetHashes() [][]byte {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *GetMerkleProofResponse) GetFlags() []byte {
	if x != nil {
		return x.Flags
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encoded transaction.
	Transaction          []byte             `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	SkipSlpValidityCheck bool               `protobuf:"varint,2,opt,name=skip_slp_validity_check,json=skipSlpValidityCheck,proto3" json:"skip_slp_validity_check,omitempty"`
	RequiredSlpBurns     []*SlpRequiredBurn `protobuf:"bytes,3,rep,name=required_slp_burns,json=requiredSlpBurns,proto3" json:"required_slp_burns,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{30}
}

func (x *SubmitTransactionRequest) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SubmitTransactionRequest) GetSkipSlpValidityCheck() bool {
	if x != nil {
		return x.SkipSlpValidityCheck
	}
	return false
}

func (x *SubmitTransactionRequest) GetRequiredSlpBurns() []*SlpRequiredBurn {
	if x != nil {
		return x.RequiredSlpBurns
	}
	return nil
}

type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction hash, little-endian.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{31}
}

func (x *SubmitTransactionResponse) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type CheckSlpTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction      []byte             `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	RequiredSlpBurns []*SlpRequiredBurn `protobuf:"bytes,2,rep,name=required_slp_burns,json=requiredSlpBurns,proto3" json:"required_slp_burns,omitempty"`
	// Using the slp specification as a basis for validity judgement can lead to confusion for new users and
	// result in accidental token burns.  use_spec_validity_judgement will cause the response's is_valid property
	// to be returned according to the slp specification.  Therefore, use_spec_validity_judgement is false by
	// default in order to avoid accidental token burns.  When use_spec_validity_judgement is false we return
	// invalid in any case which would result in a burned token, unless the burn is explicitly included as an
	// item in required_slp_burns property.
	//
	// When use_spec_validity_judgement is true, there are three cases where the is_valid response property
	// will be returned as valid, instead of invalid, as per the slp specification.
	//   1) inputs > outputs
	//   2) missing transaction outputs
	//   3) burned inputs from other tokens
	//
	// required_slp_burns is not used when use_spec_validity_judgement is set to true.
	//
	UseSpecValidityJudgement bool `protobuf:"varint,3,opt,name=use_spec_validity_judgement,json=useSpecValidityJudgement,proto3" json:"use_spec_validity_judgement,omitempty"`
}

func (x *CheckSlpTransactionRequest) Reset() {
	*x = CheckSlpTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSlpTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSlpTransactionRequest) ProtoMessage() {}

func (x *CheckSlpTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSlpTransactionRequest.ProtoReflect.Descriptor instead.
func (*CheckSlpTransactionRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{32}
}

func (x *CheckSlpTransactionRequest) GetTransaction() []byte {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *CheckSlpTransactionRequest) GetRequiredSlpBurns() []*SlpRequiredBurn {
	if x != nil {
		return x.RequiredSlpBurns
	}
	return nil
}

func (x *CheckSlpTransactionRequest) GetUseSpecValidityJudgement() bool {
	if x != nil {
		return x.UseSpecValidityJudgement
	}
	return false
}

type CheckSlpTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid       bool   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	InvalidReason string `protobuf:"bytes,2,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`
	BestHeight    int32  `protobuf:"varint,3,opt,name=best_height,json=bestHeight,proto3" json:"best_height,omitempty"`
}

func (x *CheckSlpTransactionResponse) Reset() {
	*x = CheckSlpTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckSlpTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckSlpTransactionResponse) ProtoMessage() {}

func (x *CheckSlpTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckSlpTransactionResponse.ProtoReflect.Descriptor instead.
func (*CheckSlpTransactionResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{33}
}

func (x *CheckSlpTransactionResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *CheckSlpTransactionResponse) GetInvalidReason() string {
	if x != nil {
		return x.InvalidReason
	}
	return ""
}

func (x *CheckSlpTransactionResponse) GetBestHeight() int32 {
	if x != nil {
		return x.BestHeight
	}
	return 0
}

// Request to subscribe or unsubscribe from a stream of transactions.
type SubscribeTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Subscribe to a filter. add items to a filter
	Subscribe *TransactionFilter `protobuf:"bytes,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// Unsubscribe to a filter, remove items from a filter
	Unsubscribe *TransactionFilter `protobuf:"bytes,2,opt,name=unsubscribe,proto3" json:"unsubscribe,omitempty"`
	// When include_mempool is true, new unconfirmed transactions from mempool are
	// included apart from the ones confirmed in a block.
	IncludeMempool bool `protobuf:"varint,3,opt,name=include_mempool,json=includeMempool,proto3" json:"include_mempool,omitempty"`
	// When include_in_block is true, transactions are included when they are confirmed.
	// This notification is sent in addition to any requested mempool notifications.
	IncludeInBlock bool `protobuf:"varint,4,opt,name=include_in_block,json=includeInBlock,proto3" json:"include_in_block,omitempty"`
	// When serialize_tx is true, transactions are serialized using
	// bitcoin protocol encoding. Default is false, transaction will be Marshaled
	// (see `Transaction`, `MempoolTransaction` and `TransactionNotification`)
	SerializeTx bool `protobuf:"varint,5,opt,name=serialize_tx,json=serializeTx,proto3" json:"serialize_tx,omitempty"`
}

func (x *SubscribeTransactionsRequest) Reset() {
	*x = SubscribeTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeTransactionsRequest) ProtoMessage() {}

func (x *SubscribeTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeTransactionsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{34}
}

func (x *SubscribeTransactionsRequest) GetSubscribe() *TransactionFilter {
	if x != nil {
		return x.Subscribe
	}
	return nil
}

func (x *SubscribeTransactionsRequest) GetUnsubscribe() *TransactionFilter {
	if x != nil {
		return x.Unsubscribe
	}
	return nil
}

func (x *SubscribeTransactionsRequest) GetIncludeMempool() bool {
	if x != nil {
		return x.IncludeMempool
	}
	return false
}

func (x *SubscribeTransactionsRequest) GetIncludeInBlock() bool {
	if x != nil {
		return x.IncludeInBlock
	}
	return false
}

func (x *SubscribeTransactionsRequest) GetSerializeTx() bool {
	if x != nil {
		return x.SerializeTx
	}
	return false
}

// Options to define data structure to be sent by SubscribeBlock stream:
//
//  - BlockInfo (block metadata): `BlockInfo`
//      - SubscribeBlocksRequest {}
//
//  - Marshaled Block (with transaction hashes): `Block`
//      - SubscribeBlocksRequest {
//            full_block = true
//        }
//  - Marshaled Block (with full transaction data): `Block`
//      - SubscribeBlocksRequest {
//            full_block = true
//            full_transactions = true
//        }
//  - Serialized Block acccording to bitcoin protocol encoding: `bytes`
//      - SubscribeBlocksRequest {
//            serialize_block = true
//        }
type SubscribeBlocksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// When full_block is true, a complete marshaled block is sent. See `Block`.
	// Default is false, block metadata is sent. See `BlockInfo`.
	FullBlock bool `protobuf:"varint,1,opt,name=full_block,json=fullBlock,proto3" json:"full_block,omitempty"`
	// When full_transactions is true, provide full transaction info
	// for a marshaled block.
	// Default is false, only the transaction hashes are included for
	// a marshaled block. See `TransactionData`.
	FullTransactions bool `protobuf:"varint,2,opt,name=full_transactions,json=fullTransactions,proto3" json:"full_transactions,omitempty"`
	// When serialize_block is true, blocks are serialized using bitcoin protocol encoding.
	// Default is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)
	SerializeBlock bool `protobuf:"varint,3,opt,name=serialize_block,json=serializeBlock,proto3" json:"serialize_block,omitempty"`
}

func (x *SubscribeBlocksRequest) Reset() {
	*x = SubscribeBlocksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeBlocksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeBlocksRequest) ProtoMessage() {}

func (x *SubscribeBlocksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeBlocksRequest.ProtoReflect.Descriptor instead.
func (*SubscribeBlocksRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{35}
}

func (x *SubscribeBlocksRequest) GetFullBlock() bool {
	if x != nil {
		return x.FullBlock
	}
	return false
}

func (x *SubscribeBlocksRequest) GetFullTransactions() bool {
	if x != nil {
		return x.FullTransactions
	}
	return false
}

func (x *SubscribeBlocksRequest) GetSerializeBlock() bool {
	if x != nil {
		return x.SerializeBlock
	}
	return false
}

type GetSlpTokenMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenIds [][]byte `protobuf:"bytes,1,rep,name=token_ids,json=tokenIds,proto3" json:"token_ids,omitempty"`
}

func (x *GetSlpTokenMetadataRequest) Reset() {
	*x = GetSlpTokenMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTokenMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTokenMetadataRequest) ProtoMessage() {}

func (x *GetSlpTokenMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTokenMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetSlpTokenMetadataRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{36}
}

func (x *GetSlpTokenMetadataRequest) GetTokenIds() [][]byte {
	if x != nil {
		return x.TokenIds
	}
	return nil
}

type GetSlpTokenMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenMetadata []*SlpTokenMetadata `protobuf:"bytes,1,rep,name=token_metadata,json=tokenMetadata,proto3" json:"token_metadata,omitempty"`
}

func (x *GetSlpTokenMetadataResponse) Reset() {
	*x = GetSlpTokenMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTokenMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTokenMetadataResponse) ProtoMessage() {}

func (x *GetSlpTokenMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTokenMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetSlpTokenMetadataResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{37}
}

func (x *GetSlpTokenMetadataResponse) GetTokenMetadata() []*SlpTokenMetadata {
	if x != nil {
		return x.TokenMetadata
	}
	return nil
}

type GetSlpParsedScriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlpOpreturnScript []byte `protobuf:"bytes,1,opt,name=slp_opreturn_script,json=slpOpreturnScript,proto3" json:"slp_opreturn_script,omitempty"`
}

func (x *GetSlpParsedScriptRequest) Reset() {
	*x = GetSlpParsedScriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpParsedScriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpParsedScriptRequest) ProtoMessage() {}

func (x *GetSlpParsedScriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpParsedScriptRequest.ProtoReflect.Descriptor instead.
func (*GetSlpParsedScriptRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{38}
}

func (x *GetSlpParsedScriptRequest) GetSlpOpreturnScript() []byte {
	if x != nil {
		return x.SlpOpreturnScript
	}
	return nil
}

type GetSlpParsedScriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParsingError string       `protobuf:"bytes,1,opt,name=parsing_error,json=parsingError,proto3" json:"parsing_error,omitempty"`
	TokenId      []byte       `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SlpAction    SlpAction    `protobuf:"varint,3,opt,name=slp_action,json=slpAction,proto3,enum=pb.SlpAction" json:"slp_action,omitempty"`
	TokenType    SlpTokenType `protobuf:"varint,4,opt,name=token_type,json=tokenType,proto3,enum=pb.SlpTokenType" json:"token_type,omitempty"`
	// Types that are assignable to SlpMetadata:
	//	*GetSlpParsedScriptResponse_V1Genesis
	//	*GetSlpParsedScriptResponse_V1Mint
	//	*GetSlpParsedScriptResponse_V1Send
	//	*GetSlpParsedScriptResponse_V1Nft1ChildGenesis
	//	*GetSlpParsedScriptResponse_V1Nft1ChildSend
	SlpMetadata isGetSlpParsedScriptResponse_SlpMetadata `protobuf_oneof:"slp_metadata"`
}

func (x *GetSlpParsedScriptResponse) Reset() {
	*x = GetSlpParsedScriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpParsedScriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpParsedScriptResponse) ProtoMessage() {}

func (x *GetSlpParsedScriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpParsedScriptResponse.ProtoReflect.Descriptor instead.
func (*GetSlpParsedScriptResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{39}
}

func (x *GetSlpParsedScriptResponse) GetParsingError() string {
	if x != nil {
		return x.ParsingError
	}
	return ""
}

func (x *GetSlpParsedScriptResponse) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetSlpAction() SlpAction {
	if x != nil {
		return x.SlpAction
	}
	return SlpAction_NON_SLP
}

func (x *GetSlpParsedScriptResponse) GetTokenType() SlpTokenType {
	if x != nil {
		return x.TokenType
	}
	return SlpTokenType_VERSION_NOT_SET
}

func (m *GetSlpParsedScriptResponse) GetSlpMetadata() isGetSlpParsedScriptResponse_SlpMetadata {
	if m != nil {
		return m.SlpMetadata
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetV1Genesis() *SlpV1GenesisMetadata {
	if x, ok := x.GetSlpMetadata().(*GetSlpParsedScriptResponse_V1Genesis); ok {
		return x.V1Genesis
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetV1Mint() *SlpV1MintMetadata {
	if x, ok := x.GetSlpMetadata().(*GetSlpParsedScriptResponse_V1Mint); ok {
		return x.V1Mint
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetV1Send() *SlpV1SendMetadata {
	if x, ok := x.GetSlpMetadata().(*GetSlpParsedScriptResponse_V1Send); ok {
		return x.V1Send
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetV1Nft1ChildGenesis() *SlpV1Nft1ChildGenesisMetadata {
	if x, ok := x.GetSlpMetadata().(*GetSlpParsedScriptResponse_V1Nft1ChildGenesis); ok {
		return x.V1Nft1ChildGenesis
	}
	return nil
}

func (x *GetSlpParsedScriptResponse) GetV1Nft1ChildSend() *SlpV1Nft1ChildSendMetadata {
	if x, ok := x.GetSlpMetadata().(*GetSlpParsedScriptResponse_V1Nft1ChildSend); ok {
		return x.V1Nft1ChildSend
	}
	return nil
}

type isGetSlpParsedScriptResponse_SlpMetadata interface {
	isGetSlpParsedScriptResponse_SlpMetadata()
}

type GetSlpParsedScriptResponse_V1Genesis struct {
	V1Genesis *SlpV1GenesisMetadata `protobuf:"bytes,5,opt,name=v1_genesis,json=v1Genesis,proto3,oneof"` // NFT1 Group also uses this
}

type GetSlpParsedScriptResponse_V1Mint struct {
	V1Mint *SlpV1MintMetadata `protobuf:"bytes,6,opt,name=v1_mint,json=v1Mint,proto3,oneof"` // NFT1 Group also uses this
}

type GetSlpParsedScriptResponse_V1Send struct {
	V1Send *SlpV1SendMetadata `protobuf:"bytes,7,opt,name=v1_send,json=v1Send,proto3,oneof"` // NFT1 Group also uses this
}

type GetSlpParsedScriptResponse_V1Nft1ChildGenesis struct {
	V1Nft1ChildGenesis *SlpV1Nft1ChildGenesisMetadata `protobuf:"bytes,8,opt,name=v1_nft1_child_genesis,json=v1Nft1ChildGenesis,proto3,oneof"`
}

type GetSlpParsedScriptResponse_V1Nft1ChildSend struct {
	V1Nft1ChildSend *SlpV1Nft1ChildSendMetadata `protobuf:"bytes,9,opt,name=v1_nft1_child_send,json=v1Nft1ChildSend,proto3,oneof"`
}

func (*GetSlpParsedScriptResponse_V1Genesis) isGetSlpParsedScriptResponse_SlpMetadata() {}

func (*GetSlpParsedScriptResponse_V1Mint) isGetSlpParsedScriptResponse_SlpMetadata() {}

func (*GetSlpParsedScriptResponse_V1Send) isGetSlpParsedScriptResponse_SlpMetadata() {}

func (*GetSlpParsedScriptResponse_V1Nft1ChildGenesis) isGetSlpParsedScriptResponse_SlpMetadata() {}

func (*GetSlpParsedScriptResponse_V1Nft1ChildSend) isGetSlpParsedScriptResponse_SlpMetadata() {}

type GetSlpTrustedValidationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries                 []*GetSlpTrustedValidationRequest_Query `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
	IncludeGraphsearchCount bool                                    `protobuf:"varint,2,opt,name=include_graphsearch_count,json=includeGraphsearchCount,proto3" json:"include_graphsearch_count,omitempty"`
}

func (x *GetSlpTrustedValidationRequest) Reset() {
	*x = GetSlpTrustedValidationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTrustedValidationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTrustedValidationRequest) ProtoMessage() {}

func (x *GetSlpTrustedValidationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTrustedValidationRequest.ProtoReflect.Descriptor instead.
func (*GetSlpTrustedValidationRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{40}
}

func (x *GetSlpTrustedValidationRequest) GetQueries() []*GetSlpTrustedValidationRequest_Query {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *GetSlpTrustedValidationRequest) GetIncludeGraphsearchCount() bool {
	if x != nil {
		return x.IncludeGraphsearchCount
	}
	return false
}

type GetSlpTrustedValidationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*GetSlpTrustedValidationResponse_ValidityResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *GetSlpTrustedValidationResponse) Reset() {
	*x = GetSlpTrustedValidationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTrustedValidationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTrustedValidationResponse) ProtoMessage() {}

func (x *GetSlpTrustedValidationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTrustedValidationResponse.ProtoReflect.Descriptor instead.
func (*GetSlpTrustedValidationResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{41}
}

func (x *GetSlpTrustedValidationResponse) GetResults() []*GetSlpTrustedValidationResponse_ValidityResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type GetSlpGraphSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	ValidHashes [][]byte `protobuf:"bytes,2,rep,name=valid_hashes,json=validHashes,proto3" json:"valid_hashes,omitempty"`
}

func (x *GetSlpGraphSearchRequest) Reset() {
	*x = GetSlpGraphSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpGraphSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpGraphSearchRequest) ProtoMessage() {}

func (x *GetSlpGraphSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpGraphSearchRequest.ProtoReflect.Descriptor instead.
func (*GetSlpGraphSearchRequest) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{42}
}

func (x *GetSlpGraphSearchRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *GetSlpGraphSearchRequest) GetValidHashes() [][]byte {
	if x != nil {
		return x.ValidHashes
	}
	return nil
}

type GetSlpGraphSearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txdata [][]byte `protobuf:"bytes,1,rep,name=txdata,proto3" json:"txdata,omitempty"`
}

func (x *GetSlpGraphSearchResponse) Reset() {
	*x = GetSlpGraphSearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpGraphSearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpGraphSearchResponse) ProtoMessage() {}

func (x *GetSlpGraphSearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpGraphSearchResponse.ProtoReflect.Descriptor instead.
func (*GetSlpGraphSearchResponse) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{43}
}

func (x *GetSlpGraphSearchResponse) GetTxdata() [][]byte {
	if x != nil {
		return x.Txdata
	}
	return nil
}

type BlockNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the block is connected to the chain.
	Type BlockNotification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.BlockNotification_Type" json:"type,omitempty"`
	// Types that are assignable to Block:
	//	*BlockNotification_BlockInfo
	//	*BlockNotification_MarshaledBlock
	//	*BlockNotification_SerializedBlock
	Block isBlockNotification_Block `protobuf_oneof:"block"`
}

func (x *BlockNotification) Reset() {
	*x = BlockNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockNotification) ProtoMessage() {}

func (x *BlockNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockNotification.ProtoReflect.Descriptor instead.
func (*BlockNotification) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{44}
}

func (x *BlockNotification) GetType() BlockNotification_Type {
	if x != nil {
		return x.Type
	}
	return BlockNotification_CONNECTED
}

func (m *BlockNotification) GetBlock() isBlockNotification_Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (x *BlockNotification) GetBlockInfo() *BlockInfo {
	if x, ok := x.GetBlock().(*BlockNotification_BlockInfo); ok {
		return x.BlockInfo
	}
	return nil
}

func (x *BlockNotification) GetMarshaledBlock() *Block {
	if x, ok := x.GetBlock().(*BlockNotification_MarshaledBlock); ok {
		return x.MarshaledBlock
	}
	return nil
}

func (x *BlockNotification) GetSerializedBlock() []byte {
	if x, ok := x.GetBlock().(*BlockNotification_SerializedBlock); ok {
		return x.SerializedBlock
	}
	return nil
}

type isBlockNotification_Block interface {
	isBlockNotification_Block()
}

type BlockNotification_BlockInfo struct {
	// Marshaled block header data, as well as metadata stored by the node.
	BlockInfo *BlockInfo `protobuf:"bytes,2,opt,name=block_info,json=blockInfo,proto3,oneof"`
}

type BlockNotification_MarshaledBlock struct {
	// A Block.
	MarshaledBlock *Block `protobuf:"bytes,3,opt,name=marshaled_block,json=marshaledBlock,proto3,oneof"`
}

type BlockNotification_SerializedBlock struct {
	// Binary block, serialized using bitcoin protocol encoding.
	SerializedBlock []byte `protobuf:"bytes,4,opt,name=serialized_block,json=serializedBlock,proto3,oneof"`
}

func (*BlockNotification_BlockInfo) isBlockNotification_Block() {}

func (*BlockNotification_MarshaledBlock) isBlockNotification_Block() {}

func (*BlockNotification_SerializedBlock) isBlockNotification_Block() {}

type TransactionNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the transaction has been included in a block.
	Type TransactionNotification_Type `protobuf:"varint,1,opt,name=type,proto3,enum=pb.TransactionNotification_Type" json:"type,omitempty"`
	// Types that are assignable to Transaction:
	//	*TransactionNotification_ConfirmedTransaction
	//	*TransactionNotification_UnconfirmedTransaction
	//	*TransactionNotification_SerializedTransaction
	Transaction isTransactionNotification_Transaction `protobuf_oneof:"transaction"`
}

func (x *TransactionNotification) Reset() {
	*x = TransactionNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionNotification) ProtoMessage() {}

func (x *TransactionNotification) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionNotification.ProtoReflect.Descriptor instead.
func (*TransactionNotification) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{45}
}

func (x *TransactionNotification) GetType() TransactionNotification_Type {
	if x != nil {
		return x.Type
	}
	return TransactionNotification_UNCONFIRMED
}

func (m *TransactionNotification) GetTransaction() isTransactionNotification_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (x *TransactionNotification) GetConfirmedTransaction() *Transaction {
	if x, ok := x.GetTransaction().(*TransactionNotification_ConfirmedTransaction); ok {
		return x.ConfirmedTransaction
	}
	return nil
}

func (x *TransactionNotification) GetUnconfirmedTransaction() *MempoolTransaction {
	if x, ok := x.GetTransaction().(*TransactionNotification_UnconfirmedTransaction); ok {
		return x.UnconfirmedTransaction
	}
	return nil
}

func (x *TransactionNotification) GetSerializedTransaction() []byte {
	if x, ok := x.GetTransaction().(*TransactionNotification_SerializedTransaction); ok {
		return x.SerializedTransaction
	}
	return nil
}

type isTransactionNotification_Transaction interface {
	isTransactionNotification_Transaction()
}

type TransactionNotification_ConfirmedTransaction struct {
	// A transaction included in a block.
	ConfirmedTransaction *Transaction `protobuf:"bytes,2,opt,name=confirmed_transaction,json=confirmedTransaction,proto3,oneof"`
}

type TransactionNotification_UnconfirmedTransaction struct {
	// A transaction in mempool.
	UnconfirmedTransaction *MempoolTransaction `protobuf:"bytes,3,opt,name=unconfirmed_transaction,json=unconfirmedTransaction,proto3,oneof"`
}

type TransactionNotification_SerializedTransaction struct {
	// Binary transaction, serialized using bitcoin protocol encoding.
	SerializedTransaction []byte `protobuf:"bytes,4,opt,name=serialized_transaction,json=serializedTransaction,proto3,oneof"`
}

func (*TransactionNotification_ConfirmedTransaction) isTransactionNotification_Transaction() {}

func (*TransactionNotification_UnconfirmedTransaction) isTransactionNotification_Transaction() {}

func (*TransactionNotification_SerializedTransaction) isTransactionNotification_Transaction() {}

// Metadata for identifying and validating a block
type BlockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The double sha256 hash of the six header fields in the first 80 bytes
	// of the block, when encoded according the bitcoin protocol, little-endian.
	// sha256(sha256(encoded_header))
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The block number, an incremental index for each block mined.
	Height int32 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	// A version number to track software/protocol upgrades.
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Hash of the previous block, little-endian.
	PreviousBlock []byte `protobuf:"bytes,4,opt,name=previous_block,json=previousBlock,proto3" json:"previous_block,omitempty"`
	// The root of the Merkle Tree built from all transactions in the block, little-endian.
	MerkleRoot []byte `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	// When mining of the block started, expressed in seconds since 1970-01-01.
	Timestamp int64 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Difficulty in Compressed Target Format.
	Bits uint32 `protobuf:"varint,7,opt,name=bits,proto3" json:"bits,omitempty"`
	// A random value that was generated during block mining which happened to
	// result in a computed block hash below the difficulty target at the time.
	Nonce uint32 `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Number of blocks in a chain, including the block itself upon creation.
	Confirmations int32 `protobuf:"varint,9,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Difficulty target at time of creation.
	Difficulty float64 `protobuf:"fixed64,10,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	// Hash of the next block in this chain, little-endian.
	NextBlockHash []byte `protobuf:"bytes,11,opt,name=next_block_hash,json=nextBlockHash,proto3" json:"next_block_hash,omitempty"`
	// Size of the block in bytes.
	Size int32 `protobuf:"varint,12,opt,name=size,proto3" json:"size,omitempty"`
	// The median block time of the latest 11 block timestamps.
	MedianTime int64 `protobuf:"varint,13,opt,name=median_time,json=medianTime,proto3" json:"median_time,omitempty"`
}

func (x *BlockInfo) Reset() {
	*x = BlockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockInfo) ProtoMessage() {}

func (x *BlockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockInfo.ProtoReflect.Descriptor instead.
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{46}
}

func (x *BlockInfo) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *BlockInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BlockInfo) GetPreviousBlock() []byte {
	if x != nil {
		return x.PreviousBlock
	}
	return nil
}

func (x *BlockInfo) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

func (x *BlockInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockInfo) GetBits() uint32 {
	if x != nil {
		return x.Bits
	}
	return 0
}

func (x *BlockInfo) GetNonce() uint32 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *BlockInfo) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *BlockInfo) GetDifficulty() float64 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *BlockInfo) GetNextBlockHash() []byte {
	if x != nil {
		return x.NextBlockHash
	}
	return nil
}

func (x *BlockInfo) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *BlockInfo) GetMedianTime() int64 {
	if x != nil {
		return x.MedianTime
	}
	return 0
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Block header data, as well as metadata stored by the node.
	Info *BlockInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	// List of transactions or transaction hashes.
	TransactionData []*Block_TransactionData `protobuf:"bytes,2,rep,name=transaction_data,json=transactionData,proto3" json:"transaction_data,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{47}
}

func (x *Block) GetInfo() *BlockInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *Block) GetTransactionData() []*Block_TransactionData {
	if x != nil {
		return x.TransactionData
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The double sha256 hash of the encoded transaction, little-endian.
	// sha256(sha256(encoded_transaction))
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The version of the transaction format.
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// List of inputs.
	Inputs []*Transaction_Input `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// List of outputs.
	Outputs []*Transaction_Output `protobuf:"bytes,4,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The block height or timestamp after which this transaction is allowed.
	// If value is greater than 500 million, it is assumed to be an epoch timestamp,
	// otherwise it is treated as a block-height. Default is zero, or lock.
	LockTime uint32 `protobuf:"varint,5,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`
	// The size of the transaction in bytes.
	Size int32 `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	// When the transaction was included in a block, in epoch time.
	Timestamp int64 `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Number of blocks including proof of the transaction, including
	// the block it appeared.
	Confirmations int32 `protobuf:"varint,10,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// Number of the block containing the transaction.
	BlockHeight int32 `protobuf:"varint,11,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// Hash of the block the transaction was recorded in, little-endian.
	BlockHash          []byte              `protobuf:"bytes,12,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	SlpTransactionInfo *SlpTransactionInfo `protobuf:"bytes,13,opt,name=slp_transaction_info,json=slpTransactionInfo,proto3" json:"slp_transaction_info,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{48}
}

func (x *Transaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Transaction) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Transaction) GetInputs() []*Transaction_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *Transaction) GetOutputs() []*Transaction_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *Transaction) GetLockTime() uint32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *Transaction) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Transaction) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Transaction) GetConfirmations() int32 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

func (x *Transaction) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *Transaction) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Transaction) GetSlpTransactionInfo() *SlpTransactionInfo {
	if x != nil {
		return x.SlpTransactionInfo
	}
	return nil
}

type MempoolTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The time when the transaction was added too the pool.
	AddedTime int64 `protobuf:"varint,2,opt,name=added_time,json=addedTime,proto3" json:"added_time,omitempty"`
	// The block height when the transaction was added to the pool.
	AddedHeight int32 `protobuf:"varint,3,opt,name=added_height,json=addedHeight,proto3" json:"added_height,omitempty"`
	// The total fee in satoshi the transaction pays.
	Fee int64 `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// The fee in satoshi per kilobyte the transaction pays.
	FeePerKb int64 `protobuf:"varint,5,opt,name=fee_per_kb,json=feePerKb,proto3" json:"fee_per_kb,omitempty"`
	// The priority of the transaction when it was added to the pool.
	StartingPriority float64 `protobuf:"fixed64,6,opt,name=starting_priority,json=startingPriority,proto3" json:"starting_priority,omitempty"`
}

func (x *MempoolTransaction) Reset() {
	*x = MempoolTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolTransaction) ProtoMessage() {}

func (x *MempoolTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolTransaction.ProtoReflect.Descriptor instead.
func (*MempoolTransaction) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{49}
}

func (x *MempoolTransaction) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *MempoolTransaction) GetAddedTime() int64 {
	if x != nil {
		return x.AddedTime
	}
	return 0
}

func (x *MempoolTransaction) GetAddedHeight() int32 {
	if x != nil {
		return x.AddedHeight
	}
	return 0
}

func (x *MempoolTransaction) GetFee() int64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *MempoolTransaction) GetFeePerKb() int64 {
	if x != nil {
		return x.FeePerKb
	}
	return 0
}

func (x *MempoolTransaction) GetStartingPriority() float64 {
	if x != nil {
		return x.StartingPriority
	}
	return 0
}

type UnspentOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A reference to the output given by transaction hash and index.
	Outpoint *Transaction_Input_Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// The public key script used to pay coins.
	PubkeyScript []byte `protobuf:"bytes,2,opt,name=pubkey_script,json=pubkeyScript,proto3" json:"pubkey_script,omitempty"`
	// The amount in satoshis
	Value int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	// When is_coinbase is true, the output is the first in the block,
	// a generation transaction, the result of mining.
	IsCoinbase bool `protobuf:"varint,4,opt,name=is_coinbase,json=isCoinbase,proto3" json:"is_coinbase,omitempty"`
	// The block number containing the UXTO.
	BlockHeight int32     `protobuf:"varint,5,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	SlpToken    *SlpToken `protobuf:"bytes,6,opt,name=slp_token,json=slpToken,proto3" json:"slp_token,omitempty"`
}

func (x *UnspentOutput) Reset() {
	*x = UnspentOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnspentOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnspentOutput) ProtoMessage() {}

func (x *UnspentOutput) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnspentOutput.ProtoReflect.Descriptor instead.
func (*UnspentOutput) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{50}
}

func (x *UnspentOutput) GetOutpoint() *Transaction_Input_Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *UnspentOutput) GetPubkeyScript() []byte {
	if x != nil {
		return x.PubkeyScript
	}
	return nil
}

func (x *UnspentOutput) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnspentOutput) GetIsCoinbase() bool {
	if x != nil {
		return x.IsCoinbase
	}
	return false
}

func (x *UnspentOutput) GetBlockHeight() int32 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *UnspentOutput) GetSlpToken() *SlpToken {
	if x != nil {
		return x.SlpToken
	}
	return nil
}

type TransactionFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter by address(es)
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Filter by output hash and index.
	Outpoints []*Transaction_Input_Outpoint `protobuf:"bytes,2,rep,name=outpoints,proto3" json:"outpoints,omitempty"`
	// Filter by data elements contained in pubkey scripts.
	DataElements [][]byte `protobuf:"bytes,3,rep,name=data_elements,json=dataElements,proto3" json:"data_elements,omitempty"`
	// Subscribed/Unsubscribe to everything. Other filters
	// will be ignored.
	AllTransactions bool `protobuf:"varint,4,opt,name=all_transactions,json=allTransactions,proto3" json:"all_transactions,omitempty"`
	// Subscribed/Unsubscribe to everything slp. Other filters
	// will be ignored, except this filter will be overriden by all_transactions=true
	AllSlpTransactions bool `protobuf:"varint,5,opt,name=all_slp_transactions,json=allSlpTransactions,proto3" json:"all_slp_transactions,omitempty"`
	// only transactions associated with the included tokenIds
	SlpTokenIds [][]byte `protobuf:"bytes,6,rep,name=slp_token_ids,json=slpTokenIds,proto3" json:"slp_token_ids,omitempty"`
}

func (x *TransactionFilter) Reset() {
	*x = TransactionFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionFilter) ProtoMessage() {}

func (x *TransactionFilter) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionFilter.ProtoReflect.Descriptor instead.
func (*TransactionFilter) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{51}
}

func (x *TransactionFilter) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *TransactionFilter) GetOutpoints() []*Transaction_Input_Outpoint {
	if x != nil {
		return x.Outpoints
	}
	return nil
}

func (x *TransactionFilter) GetDataElements() [][]byte {
	if x != nil {
		return x.DataElements
	}
	return nil
}

func (x *TransactionFilter) GetAllTransactions() bool {
	if x != nil {
		return x.AllTransactions
	}
	return false
}

func (x *TransactionFilter) GetAllSlpTransactions() bool {
	if x != nil {
		return x.AllSlpTransactions
	}
	return false
}

func (x *TransactionFilter) GetSlpTokenIds() [][]byte {
	if x != nil {
		return x.SlpTokenIds
	}
	return nil
}

// SlpToken info used in transaction inputs / outputs
//
// WARNING: Some languages (e.g., JavaScript) may not properly handle the 'uint64'
// for large amounts. For this reason, an annotation has been added for JS to
// return a string for the amount field instead of casting uint64 to the JS 'number'
// type. Other languages may require similar treatment.
//
type SlpToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId     []byte       `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Amount      uint64       `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	IsMintBaton bool         `protobuf:"varint,3,opt,name=is_mint_baton,json=isMintBaton,proto3" json:"is_mint_baton,omitempty"`
	Address     string       `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Decimals    uint32       `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	SlpAction   SlpAction    `protobuf:"varint,6,opt,name=slp_action,json=slpAction,proto3,enum=pb.SlpAction" json:"slp_action,omitempty"`
	TokenType   SlpTokenType `protobuf:"varint,7,opt,name=token_type,json=tokenType,proto3,enum=pb.SlpTokenType" json:"token_type,omitempty"`
}

func (x *SlpToken) Reset() {
	*x = SlpToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpToken) ProtoMessage() {}

func (x *SlpToken) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpToken.ProtoReflect.Descriptor instead.
func (*SlpToken) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{52}
}

func (x *SlpToken) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *SlpToken) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SlpToken) GetIsMintBaton() bool {
	if x != nil {
		return x.IsMintBaton
	}
	return false
}

func (x *SlpToken) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SlpToken) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SlpToken) GetSlpAction() SlpAction {
	if x != nil {
		return x.SlpAction
	}
	return SlpAction_NON_SLP
}

func (x *SlpToken) GetTokenType() SlpTokenType {
	if x != nil {
		return x.TokenType
	}
	return SlpTokenType_VERSION_NOT_SET
}

// SlpTransactionInfo is used inside the Transaction message type.
type SlpTransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlpAction         SlpAction                            `protobuf:"varint,1,opt,name=slp_action,json=slpAction,proto3,enum=pb.SlpAction" json:"slp_action,omitempty"`
	ValidityJudgement SlpTransactionInfo_ValidityJudgement `protobuf:"varint,2,opt,name=validity_judgement,json=validityJudgement,proto3,enum=pb.SlpTransactionInfo_ValidityJudgement" json:"validity_judgement,omitempty"`
	ParseError        string                               `protobuf:"bytes,3,opt,name=parse_error,json=parseError,proto3" json:"parse_error,omitempty"`
	TokenId           []byte                               `protobuf:"bytes,4,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	BurnFlags         []SlpTransactionInfo_BurnFlags       `protobuf:"varint,5,rep,packed,name=burn_flags,json=burnFlags,proto3,enum=pb.SlpTransactionInfo_BurnFlags" json:"burn_flags,omitempty"`
	// Types that are assignable to TxMetadata:
	//	*SlpTransactionInfo_V1Genesis
	//	*SlpTransactionInfo_V1Mint
	//	*SlpTransactionInfo_V1Send
	//	*SlpTransactionInfo_V1Nft1ChildGenesis
	//	*SlpTransactionInfo_V1Nft1ChildSend
	TxMetadata isSlpTransactionInfo_TxMetadata `protobuf_oneof:"tx_metadata"`
}

func (x *SlpTransactionInfo) Reset() {
	*x = SlpTransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpTransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpTransactionInfo) ProtoMessage() {}

func (x *SlpTransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpTransactionInfo.ProtoReflect.Descriptor instead.
func (*SlpTransactionInfo) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{53}
}

func (x *SlpTransactionInfo) GetSlpAction() SlpAction {
	if x != nil {
		return x.SlpAction
	}
	return SlpAction_NON_SLP
}

func (x *SlpTransactionInfo) GetValidityJudgement() SlpTransactionInfo_ValidityJudgement {
	if x != nil {
		return x.ValidityJudgement
	}
	return SlpTransactionInfo_UNKNOWN_OR_INVALID
}

func (x *SlpTransactionInfo) GetParseError() string {
	if x != nil {
		return x.ParseError
	}
	return ""
}

func (x *SlpTransactionInfo) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *SlpTransactionInfo) GetBurnFlags() []SlpTransactionInfo_BurnFlags {
	if x != nil {
		return x.BurnFlags
	}
	return nil
}

func (m *SlpTransactionInfo) GetTxMetadata() isSlpTransactionInfo_TxMetadata {
	if m != nil {
		return m.TxMetadata
	}
	return nil
}

func (x *SlpTransactionInfo) GetV1Genesis() *SlpV1GenesisMetadata {
	if x, ok := x.GetTxMetadata().(*SlpTransactionInfo_V1Genesis); ok {
		return x.V1Genesis
	}
	return nil
}

func (x *SlpTransactionInfo) GetV1Mint() *SlpV1MintMetadata {
	if x, ok := x.GetTxMetadata().(*SlpTransactionInfo_V1Mint); ok {
		return x.V1Mint
	}
	return nil
}

func (x *SlpTransactionInfo) GetV1Send() *SlpV1SendMetadata {
	if x, ok := x.GetTxMetadata().(*SlpTransactionInfo_V1Send); ok {
		return x.V1Send
	}
	return nil
}

func (x *SlpTransactionInfo) GetV1Nft1ChildGenesis() *SlpV1Nft1ChildGenesisMetadata {
	if x, ok := x.GetTxMetadata().(*SlpTransactionInfo_V1Nft1ChildGenesis); ok {
		return x.V1Nft1ChildGenesis
	}
	return nil
}

func (x *SlpTransactionInfo) GetV1Nft1ChildSend() *SlpV1Nft1ChildSendMetadata {
	if x, ok := x.GetTxMetadata().(*SlpTransactionInfo_V1Nft1ChildSend); ok {
		return x.V1Nft1ChildSend
	}
	return nil
}

type isSlpTransactionInfo_TxMetadata interface {
	isSlpTransactionInfo_TxMetadata()
}

type SlpTransactionInfo_V1Genesis struct {
	V1Genesis *SlpV1GenesisMetadata `protobuf:"bytes,6,opt,name=v1_genesis,json=v1Genesis,proto3,oneof"` // NFT1 Group also uses this
}

type SlpTransactionInfo_V1Mint struct {
	V1Mint *SlpV1MintMetadata `protobuf:"bytes,7,opt,name=v1_mint,json=v1Mint,proto3,oneof"` // NFT1 Group also uses this
}

type SlpTransactionInfo_V1Send struct {
	V1Send *SlpV1SendMetadata `protobuf:"bytes,8,opt,name=v1_send,json=v1Send,proto3,oneof"` // NFT1 Group also uses this
}

type SlpTransactionInfo_V1Nft1ChildGenesis struct {
	V1Nft1ChildGenesis *SlpV1Nft1ChildGenesisMetadata `protobuf:"bytes,9,opt,name=v1_nft1_child_genesis,json=v1Nft1ChildGenesis,proto3,oneof"`
}

type SlpTransactionInfo_V1Nft1ChildSend struct {
	V1Nft1ChildSend *SlpV1Nft1ChildSendMetadata `protobuf:"bytes,10,opt,name=v1_nft1_child_send,json=v1Nft1ChildSend,proto3,oneof"`
}

func (*SlpTransactionInfo_V1Genesis) isSlpTransactionInfo_TxMetadata() {}

func (*SlpTransactionInfo_V1Mint) isSlpTransactionInfo_TxMetadata() {}

func (*SlpTransactionInfo_V1Send) isSlpTransactionInfo_TxMetadata() {}

func (*SlpTransactionInfo_V1Nft1ChildGenesis) isSlpTransactionInfo_TxMetadata() {}

func (*SlpTransactionInfo_V1Nft1ChildSend) isSlpTransactionInfo_TxMetadata() {}

// SlpV1GenesisMetadata is used to marshal type 1 and NFT1 Group GENESIS OP_RETURN scriptPubKey
type SlpV1GenesisMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ticker        []byte `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	DocumentUrl   []byte `protobuf:"bytes,3,opt,name=document_url,json=documentUrl,proto3" json:"document_url,omitempty"`
	DocumentHash  []byte `protobuf:"bytes,4,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	Decimals      uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MintBatonVout uint32 `protobuf:"varint,6,opt,name=mint_baton_vout,json=mintBatonVout,proto3" json:"mint_baton_vout,omitempty"`
	MintAmount    uint64 `protobuf:"varint,7,opt,name=mint_amount,json=mintAmount,proto3" json:"mint_amount,omitempty"`
}

func (x *SlpV1GenesisMetadata) Reset() {
	*x = SlpV1GenesisMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpV1GenesisMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpV1GenesisMetadata) ProtoMessage() {}

func (x *SlpV1GenesisMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpV1GenesisMetadata.ProtoReflect.Descriptor instead.
func (*SlpV1GenesisMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{54}
}

func (x *SlpV1GenesisMetadata) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SlpV1GenesisMetadata) GetTicker() []byte {
	if x != nil {
		return x.Ticker
	}
	return nil
}

func (x *SlpV1GenesisMetadata) GetDocumentUrl() []byte {
	if x != nil {
		return x.DocumentUrl
	}
	return nil
}

func (x *SlpV1GenesisMetadata) GetDocumentHash() []byte {
	if x != nil {
		return x.DocumentHash
	}
	return nil
}

func (x *SlpV1GenesisMetadata) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SlpV1GenesisMetadata) GetMintBatonVout() uint32 {
	if x != nil {
		return x.MintBatonVout
	}
	return 0
}

func (x *SlpV1GenesisMetadata) GetMintAmount() uint64 {
	if x != nil {
		return x.MintAmount
	}
	return 0
}

// SlpV1MintMetadata is used to marshal type 1 MINT OP_RETURN scriptPubKey
type SlpV1MintMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MintBatonVout uint32 `protobuf:"varint,1,opt,name=mint_baton_vout,json=mintBatonVout,proto3" json:"mint_baton_vout,omitempty"`
	MintAmount    uint64 `protobuf:"varint,2,opt,name=mint_amount,json=mintAmount,proto3" json:"mint_amount,omitempty"`
}

func (x *SlpV1MintMetadata) Reset() {
	*x = SlpV1MintMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpV1MintMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpV1MintMetadata) ProtoMessage() {}

func (x *SlpV1MintMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpV1MintMetadata.ProtoReflect.Descriptor instead.
func (*SlpV1MintMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{55}
}

func (x *SlpV1MintMetadata) GetMintBatonVout() uint32 {
	if x != nil {
		return x.MintBatonVout
	}
	return 0
}

func (x *SlpV1MintMetadata) GetMintAmount() uint64 {
	if x != nil {
		return x.MintAmount
	}
	return 0
}

// SlpV1SendMetadata is used to marshal type 1 and NFT1 Group SEND OP_RETURN scriptPubKey
type SlpV1SendMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amounts []uint64 `protobuf:"varint,1,rep,packed,name=amounts,proto3" json:"amounts,omitempty"`
}

func (x *SlpV1SendMetadata) Reset() {
	*x = SlpV1SendMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpV1SendMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpV1SendMetadata) ProtoMessage() {}

func (x *SlpV1SendMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpV1SendMetadata.ProtoReflect.Descriptor instead.
func (*SlpV1SendMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{56}
}

func (x *SlpV1SendMetadata) GetAmounts() []uint64 {
	if x != nil {
		return x.Amounts
	}
	return nil
}

// SlpV1Nft1ChildGenesisMetadata is used to marshal NFT1 Child GENESIS OP_RETURN scriptPubKey
type SlpV1Nft1ChildGenesisMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ticker       []byte `protobuf:"bytes,2,opt,name=ticker,proto3" json:"ticker,omitempty"`
	DocumentUrl  []byte `protobuf:"bytes,3,opt,name=document_url,json=documentUrl,proto3" json:"document_url,omitempty"`
	DocumentHash []byte `protobuf:"bytes,4,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	Decimals     uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	GroupTokenId []byte `protobuf:"bytes,6,opt,name=group_token_id,json=groupTokenId,proto3" json:"group_token_id,omitempty"`
}

func (x *SlpV1Nft1ChildGenesisMetadata) Reset() {
	*x = SlpV1Nft1ChildGenesisMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpV1Nft1ChildGenesisMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpV1Nft1ChildGenesisMetadata) ProtoMessage() {}

func (x *SlpV1Nft1ChildGenesisMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpV1Nft1ChildGenesisMetadata.ProtoReflect.Descriptor instead.
func (*SlpV1Nft1ChildGenesisMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{57}
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetTicker() []byte {
	if x != nil {
		return x.Ticker
	}
	return nil
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetDocumentUrl() []byte {
	if x != nil {
		return x.DocumentUrl
	}
	return nil
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetDocumentHash() []byte {
	if x != nil {
		return x.DocumentHash
	}
	return nil
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SlpV1Nft1ChildGenesisMetadata) GetGroupTokenId() []byte {
	if x != nil {
		return x.GroupTokenId
	}
	return nil
}

// SlpV1Nft1ChildSendMetadata is used to marshal NFT1 Child SEND OP_RETURN scriptPubKey
type SlpV1Nft1ChildSendMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupTokenId []byte `protobuf:"bytes,1,opt,name=group_token_id,json=groupTokenId,proto3" json:"group_token_id,omitempty"`
}

func (x *SlpV1Nft1ChildSendMetadata) Reset() {
	*x = SlpV1Nft1ChildSendMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpV1Nft1ChildSendMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpV1Nft1ChildSendMetadata) ProtoMessage() {}

func (x *SlpV1Nft1ChildSendMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpV1Nft1ChildSendMetadata.ProtoReflect.Descriptor instead.
func (*SlpV1Nft1ChildSendMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{58}
}

func (x *SlpV1Nft1ChildSendMetadata) GetGroupTokenId() []byte {
	if x != nil {
		return x.GroupTokenId
	}
	return nil
}

// SlpTokenMetadata is used to marshal metadata about a specific TokenID
type SlpTokenMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   []byte       `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenType SlpTokenType `protobuf:"varint,2,opt,name=token_type,json=tokenType,proto3,enum=pb.SlpTokenType" json:"token_type,omitempty"`
	// Types that are assignable to TypeMetadata:
	//	*SlpTokenMetadata_V1Fungible_
	//	*SlpTokenMetadata_V1Nft1Group
	//	*SlpTokenMetadata_V1Nft1Child
	TypeMetadata isSlpTokenMetadata_TypeMetadata `protobuf_oneof:"type_metadata"`
}

func (x *SlpTokenMetadata) Reset() {
	*x = SlpTokenMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpTokenMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpTokenMetadata) ProtoMessage() {}

func (x *SlpTokenMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpTokenMetadata.ProtoReflect.Descriptor instead.
func (*SlpTokenMetadata) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{59}
}

func (x *SlpTokenMetadata) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *SlpTokenMetadata) GetTokenType() SlpTokenType {
	if x != nil {
		return x.TokenType
	}
	return SlpTokenType_VERSION_NOT_SET
}

func (m *SlpTokenMetadata) GetTypeMetadata() isSlpTokenMetadata_TypeMetadata {
	if m != nil {
		return m.TypeMetadata
	}
	return nil
}

func (x *SlpTokenMetadata) GetV1Fungible() *SlpTokenMetadata_V1Fungible {
	if x, ok := x.GetTypeMetadata().(*SlpTokenMetadata_V1Fungible_); ok {
		return x.V1Fungible
	}
	return nil
}

func (x *SlpTokenMetadata) GetV1Nft1Group() *SlpTokenMetadata_V1NFT1Group {
	if x, ok := x.GetTypeMetadata().(*SlpTokenMetadata_V1Nft1Group); ok {
		return x.V1Nft1Group
	}
	return nil
}

func (x *SlpTokenMetadata) GetV1Nft1Child() *SlpTokenMetadata_V1NFT1Child {
	if x, ok := x.GetTypeMetadata().(*SlpTokenMetadata_V1Nft1Child); ok {
		return x.V1Nft1Child
	}
	return nil
}

type isSlpTokenMetadata_TypeMetadata interface {
	isSlpTokenMetadata_TypeMetadata()
}

type SlpTokenMetadata_V1Fungible_ struct {
	V1Fungible *SlpTokenMetadata_V1Fungible `protobuf:"bytes,3,opt,name=v1_fungible,json=v1Fungible,proto3,oneof"`
}

type SlpTokenMetadata_V1Nft1Group struct {
	V1Nft1Group *SlpTokenMetadata_V1NFT1Group `protobuf:"bytes,4,opt,name=v1_nft1_group,json=v1Nft1Group,proto3,oneof"`
}

type SlpTokenMetadata_V1Nft1Child struct {
	V1Nft1Child *SlpTokenMetadata_V1NFT1Child `protobuf:"bytes,5,opt,name=v1_nft1_child,json=v1Nft1Child,proto3,oneof"`
}

func (*SlpTokenMetadata_V1Fungible_) isSlpTokenMetadata_TypeMetadata() {}

func (*SlpTokenMetadata_V1Nft1Group) isSlpTokenMetadata_TypeMetadata() {}

func (*SlpTokenMetadata_V1Nft1Child) isSlpTokenMetadata_TypeMetadata() {}

// SlpRequiredBurn is used by clients to allow token burning
type SlpRequiredBurn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Outpoint  *Transaction_Input_Outpoint `protobuf:"bytes,1,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	TokenId   []byte                      `protobuf:"bytes,2,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenType SlpTokenType                `protobuf:"varint,3,opt,name=token_type,json=tokenType,proto3,enum=pb.SlpTokenType" json:"token_type,omitempty"`
	// Types that are assignable to BurnIntention:
	//	*SlpRequiredBurn_Amount
	//	*SlpRequiredBurn_MintBatonVout
	BurnIntention isSlpRequiredBurn_BurnIntention `protobuf_oneof:"burn_intention"`
}

func (x *SlpRequiredBurn) Reset() {
	*x = SlpRequiredBurn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpRequiredBurn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpRequiredBurn) ProtoMessage() {}

func (x *SlpRequiredBurn) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpRequiredBurn.ProtoReflect.Descriptor instead.
func (*SlpRequiredBurn) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{60}
}

func (x *SlpRequiredBurn) GetOutpoint() *Transaction_Input_Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *SlpRequiredBurn) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *SlpRequiredBurn) GetTokenType() SlpTokenType {
	if x != nil {
		return x.TokenType
	}
	return SlpTokenType_VERSION_NOT_SET
}

func (m *SlpRequiredBurn) GetBurnIntention() isSlpRequiredBurn_BurnIntention {
	if m != nil {
		return m.BurnIntention
	}
	return nil
}

func (x *SlpRequiredBurn) GetAmount() uint64 {
	if x, ok := x.GetBurnIntention().(*SlpRequiredBurn_Amount); ok {
		return x.Amount
	}
	return 0
}

func (x *SlpRequiredBurn) GetMintBatonVout() uint32 {
	if x, ok := x.GetBurnIntention().(*SlpRequiredBurn_MintBatonVout); ok {
		return x.MintBatonVout
	}
	return 0
}

type isSlpRequiredBurn_BurnIntention interface {
	isSlpRequiredBurn_BurnIntention()
}

type SlpRequiredBurn_Amount struct {
	Amount uint64 `protobuf:"varint,4,opt,name=amount,proto3,oneof"`
}

type SlpRequiredBurn_MintBatonVout struct {
	MintBatonVout uint32 `protobuf:"varint,5,opt,name=mint_baton_vout,json=mintBatonVout,proto3,oneof"`
}

func (*SlpRequiredBurn_Amount) isSlpRequiredBurn_BurnIntention() {}

func (*SlpRequiredBurn_MintBatonVout) isSlpRequiredBurn_BurnIntention() {}

type GetMempoolResponse_TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Either one of the two following is provided, depending on the request.
	//
	// Types that are assignable to TxidsOrTxs:
	//	*GetMempoolResponse_TransactionData_TransactionHash
	//	*GetMempoolResponse_TransactionData_Transaction
	TxidsOrTxs isGetMempoolResponse_TransactionData_TxidsOrTxs `protobuf_oneof:"txids_or_txs"`
}

func (x *GetMempoolResponse_TransactionData) Reset() {
	*x = GetMempoolResponse_TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMempoolResponse_TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMempoolResponse_TransactionData) ProtoMessage() {}

func (x *GetMempoolResponse_TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMempoolResponse_TransactionData.ProtoReflect.Descriptor instead.
func (*GetMempoolResponse_TransactionData) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{3, 0}
}

func (m *GetMempoolResponse_TransactionData) GetTxidsOrTxs() isGetMempoolResponse_TransactionData_TxidsOrTxs {
	if m != nil {
		return m.TxidsOrTxs
	}
	return nil
}

func (x *GetMempoolResponse_TransactionData) GetTransactionHash() []byte {
	if x, ok := x.GetTxidsOrTxs().(*GetMempoolResponse_TransactionData_TransactionHash); ok {
		return x.TransactionHash
	}
	return nil
}

func (x *GetMempoolResponse_TransactionData) GetTransaction() *Transaction {
	if x, ok := x.GetTxidsOrTxs().(*GetMempoolResponse_TransactionData_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isGetMempoolResponse_TransactionData_TxidsOrTxs interface {
	isGetMempoolResponse_TransactionData_TxidsOrTxs()
}

type GetMempoolResponse_TransactionData_TransactionHash struct {
	// The transaction hash, little-endian.
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3,oneof"`
}

type GetMempoolResponse_TransactionData_Transaction struct {
	// The transaction data.
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*GetMempoolResponse_TransactionData_TransactionHash) isGetMempoolResponse_TransactionData_TxidsOrTxs() {
}

func (*GetMempoolResponse_TransactionData_Transaction) isGetMempoolResponse_TransactionData_TxidsOrTxs() {
}

type GetSlpTrustedValidationRequest_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevOutHash            []byte   `protobuf:"bytes,1,opt,name=prev_out_hash,json=prevOutHash,proto3" json:"prev_out_hash,omitempty"`
	PrevOutVout            uint32   `protobuf:"varint,2,opt,name=prev_out_vout,json=prevOutVout,proto3" json:"prev_out_vout,omitempty"`
	GraphsearchValidHashes [][]byte `protobuf:"bytes,3,rep,name=graphsearch_valid_hashes,json=graphsearchValidHashes,proto3" json:"graphsearch_valid_hashes,omitempty"`
}

func (x *GetSlpTrustedValidationRequest_Query) Reset() {
	*x = GetSlpTrustedValidationRequest_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTrustedValidationRequest_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTrustedValidationRequest_Query) ProtoMessage() {}

func (x *GetSlpTrustedValidationRequest_Query) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTrustedValidationRequest_Query.ProtoReflect.Descriptor instead.
func (*GetSlpTrustedValidationRequest_Query) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{40, 0}
}

func (x *GetSlpTrustedValidationRequest_Query) GetPrevOutHash() []byte {
	if x != nil {
		return x.PrevOutHash
	}
	return nil
}

func (x *GetSlpTrustedValidationRequest_Query) GetPrevOutVout() uint32 {
	if x != nil {
		return x.PrevOutVout
	}
	return 0
}

func (x *GetSlpTrustedValidationRequest_Query) GetGraphsearchValidHashes() [][]byte {
	if x != nil {
		return x.GraphsearchValidHashes
	}
	return nil
}

type GetSlpTrustedValidationResponse_ValidityResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevOutHash []byte       `protobuf:"bytes,1,opt,name=prev_out_hash,json=prevOutHash,proto3" json:"prev_out_hash,omitempty"`
	PrevOutVout uint32       `protobuf:"varint,2,opt,name=prev_out_vout,json=prevOutVout,proto3" json:"prev_out_vout,omitempty"`
	TokenId     []byte       `protobuf:"bytes,3,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	SlpAction   SlpAction    `protobuf:"varint,4,opt,name=slp_action,json=slpAction,proto3,enum=pb.SlpAction" json:"slp_action,omitempty"`
	TokenType   SlpTokenType `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3,enum=pb.SlpTokenType" json:"token_type,omitempty"`
	// Types that are assignable to ValidityResultType:
	//	*GetSlpTrustedValidationResponse_ValidityResult_V1TokenAmount
	//	*GetSlpTrustedValidationResponse_ValidityResult_V1MintBaton
	ValidityResultType  isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType `protobuf_oneof:"validity_result_type"`
	SlpTxnOpreturn      []byte                                                              `protobuf:"bytes,8,opt,name=slp_txn_opreturn,json=slpTxnOpreturn,proto3" json:"slp_txn_opreturn,omitempty"`
	GraphsearchTxnCount uint32                                                              `protobuf:"varint,9,opt,name=graphsearch_txn_count,json=graphsearchTxnCount,proto3" json:"graphsearch_txn_count,omitempty"`
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) Reset() {
	*x = GetSlpTrustedValidationResponse_ValidityResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSlpTrustedValidationResponse_ValidityResult) ProtoMessage() {}

func (x *GetSlpTrustedValidationResponse_ValidityResult) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSlpTrustedValidationResponse_ValidityResult.ProtoReflect.Descriptor instead.
func (*GetSlpTrustedValidationResponse_ValidityResult) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{41, 0}
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetPrevOutHash() []byte {
	if x != nil {
		return x.PrevOutHash
	}
	return nil
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetPrevOutVout() uint32 {
	if x != nil {
		return x.PrevOutVout
	}
	return 0
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetTokenId() []byte {
	if x != nil {
		return x.TokenId
	}
	return nil
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetSlpAction() SlpAction {
	if x != nil {
		return x.SlpAction
	}
	return SlpAction_NON_SLP
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetTokenType() SlpTokenType {
	if x != nil {
		return x.TokenType
	}
	return SlpTokenType_VERSION_NOT_SET
}

func (m *GetSlpTrustedValidationResponse_ValidityResult) GetValidityResultType() isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType {
	if m != nil {
		return m.ValidityResultType
	}
	return nil
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetV1TokenAmount() uint64 {
	if x, ok := x.GetValidityResultType().(*GetSlpTrustedValidationResponse_ValidityResult_V1TokenAmount); ok {
		return x.V1TokenAmount
	}
	return 0
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetV1MintBaton() bool {
	if x, ok := x.GetValidityResultType().(*GetSlpTrustedValidationResponse_ValidityResult_V1MintBaton); ok {
		return x.V1MintBaton
	}
	return false
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetSlpTxnOpreturn() []byte {
	if x != nil {
		return x.SlpTxnOpreturn
	}
	return nil
}

func (x *GetSlpTrustedValidationResponse_ValidityResult) GetGraphsearchTxnCount() uint32 {
	if x != nil {
		return x.GraphsearchTxnCount
	}
	return 0
}

type isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType interface {
	isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType()
}

type GetSlpTrustedValidationResponse_ValidityResult_V1TokenAmount struct {
	V1TokenAmount uint64 `protobuf:"varint,6,opt,name=v1_token_amount,json=v1TokenAmount,proto3,oneof"`
}

type GetSlpTrustedValidationResponse_ValidityResult_V1MintBaton struct {
	V1MintBaton bool `protobuf:"varint,7,opt,name=v1_mint_baton,json=v1MintBaton,proto3,oneof"`
}

func (*GetSlpTrustedValidationResponse_ValidityResult_V1TokenAmount) isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType() {
}

func (*GetSlpTrustedValidationResponse_ValidityResult_V1MintBaton) isGetSlpTrustedValidationResponse_ValidityResult_ValidityResultType() {
}

type Block_TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TxidsOrTxs:
	//	*Block_TransactionData_TransactionHash
	//	*Block_TransactionData_Transaction
	TxidsOrTxs isBlock_TransactionData_TxidsOrTxs `protobuf_oneof:"txids_or_txs"`
}

func (x *Block_TransactionData) Reset() {
	*x = Block_TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block_TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block_TransactionData) ProtoMessage() {}

func (x *Block_TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block_TransactionData.ProtoReflect.Descriptor instead.
func (*Block_TransactionData) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{47, 0}
}

func (m *Block_TransactionData) GetTxidsOrTxs() isBlock_TransactionData_TxidsOrTxs {
	if m != nil {
		return m.TxidsOrTxs
	}
	return nil
}

func (x *Block_TransactionData) GetTransactionHash() []byte {
	if x, ok := x.GetTxidsOrTxs().(*Block_TransactionData_TransactionHash); ok {
		return x.TransactionHash
	}
	return nil
}

func (x *Block_TransactionData) GetTransaction() *Transaction {
	if x, ok := x.GetTxidsOrTxs().(*Block_TransactionData_Transaction); ok {
		return x.Transaction
	}
	return nil
}

type isBlock_TransactionData_TxidsOrTxs interface {
	isBlock_TransactionData_TxidsOrTxs()
}

type Block_TransactionData_TransactionHash struct {
	// Just the transaction hash, little-endian.
	TransactionHash []byte `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3,oneof"`
}

type Block_TransactionData_Transaction struct {
	// A marshaled transaction.
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,oneof"`
}

func (*Block_TransactionData_TransactionHash) isBlock_TransactionData_TxidsOrTxs() {}

func (*Block_TransactionData_Transaction) isBlock_TransactionData_TxidsOrTxs() {}

type Transaction_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of the input, starting from zero.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The related outpoint.
	Outpoint *Transaction_Input_Outpoint `protobuf:"bytes,2,opt,name=outpoint,proto3" json:"outpoint,omitempty"`
	// An unlocking script asserting a transaction is permitted to spend
	// the Outpoint (UTXO)
	SignatureScript []byte `protobuf:"bytes,3,opt,name=signature_script,json=signatureScript,proto3" json:"signature_script,omitempty"`
	// As of BIP-68, the sequence number is interpreted as a relative
	// lock-time for the input.
	Sequence uint32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Amount in satoshi.
	Value int64 `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	// The pubkey_script of the previous output that is being spent.
	PreviousScript []byte `protobuf:"bytes,6,opt,name=previous_script,json=previousScript,proto3" json:"previous_script,omitempty"`
	// The bitcoin addresses associated with this input.
	Address  string    `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	SlpToken *SlpToken `protobuf:"bytes,8,opt,name=slp_token,json=slpToken,proto3" json:"slp_token,omitempty"`
}

func (x *Transaction_Input) Reset() {
	*x = Transaction_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Input) ProtoMessage() {}

func (x *Transaction_Input) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Input.ProtoReflect.Descriptor instead.
func (*Transaction_Input) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{48, 0}
}

func (x *Transaction_Input) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction_Input) GetOutpoint() *Transaction_Input_Outpoint {
	if x != nil {
		return x.Outpoint
	}
	return nil
}

func (x *Transaction_Input) GetSignatureScript() []byte {
	if x != nil {
		return x.SignatureScript
	}
	return nil
}

func (x *Transaction_Input) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Transaction_Input) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction_Input) GetPreviousScript() []byte {
	if x != nil {
		return x.PreviousScript
	}
	return nil
}

func (x *Transaction_Input) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Transaction_Input) GetSlpToken() *SlpToken {
	if x != nil {
		return x.SlpToken
	}
	return nil
}

type Transaction_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of the output, starting from zero.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The number of satoshis to be transferred.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The public key script used to pay coins.
	PubkeyScript []byte `protobuf:"bytes,3,opt,name=pubkey_script,json=pubkeyScript,proto3" json:"pubkey_script,omitempty"`
	// The bitcoin addresses associated with this output.
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The type of script.
	ScriptClass string `protobuf:"bytes,5,opt,name=script_class,json=scriptClass,proto3" json:"script_class,omitempty"`
	// The script expressed in Bitcoin Cash Script.
	DisassembledScript string    `protobuf:"bytes,6,opt,name=disassembled_script,json=disassembledScript,proto3" json:"disassembled_script,omitempty"`
	SlpToken           *SlpToken `protobuf:"bytes,7,opt,name=slp_token,json=slpToken,proto3" json:"slp_token,omitempty"`
}

func (x *Transaction_Output) Reset() {
	*x = Transaction_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Output) ProtoMessage() {}

func (x *Transaction_Output) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Output.ProtoReflect.Descriptor instead.
func (*Transaction_Output) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{48, 1}
}

func (x *Transaction_Output) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Transaction_Output) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Transaction_Output) GetPubkeyScript() []byte {
	if x != nil {
		return x.PubkeyScript
	}
	return nil
}

func (x *Transaction_Output) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Transaction_Output) GetScriptClass() string {
	if x != nil {
		return x.ScriptClass
	}
	return ""
}

func (x *Transaction_Output) GetDisassembledScript() string {
	if x != nil {
		return x.DisassembledScript
	}
	return ""
}

func (x *Transaction_Output) GetSlpToken() *SlpToken {
	if x != nil {
		return x.SlpToken
	}
	return nil
}

type Transaction_Input_Outpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash of the transaction containing the output to be spent, little-endian
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The index of specific output on the transaction.
	Index uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *Transaction_Input_Outpoint) Reset() {
	*x = Transaction_Input_Outpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction_Input_Outpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction_Input_Outpoint) ProtoMessage() {}

func (x *Transaction_Input_Outpoint) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction_Input_Outpoint.ProtoReflect.Descriptor instead.
func (*Transaction_Input_Outpoint) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{48, 0, 0}
}

func (x *Transaction_Input_Outpoint) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Transaction_Input_Outpoint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// V1Fungible is used to marshal metadata specific to Type 1 token IDs
type SlpTokenMetadata_V1Fungible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenTicker       string `protobuf:"bytes,1,opt,name=token_ticker,json=tokenTicker,proto3" json:"token_ticker,omitempty"`
	TokenName         string `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenDocumentUrl  string `protobuf:"bytes,3,opt,name=token_document_url,json=tokenDocumentUrl,proto3" json:"token_document_url,omitempty"`
	TokenDocumentHash []byte `protobuf:"bytes,4,opt,name=token_document_hash,json=tokenDocumentHash,proto3" json:"token_document_hash,omitempty"`
	Decimals          uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MintBatonHash     []byte `protobuf:"bytes,6,opt,name=mint_baton_hash,json=mintBatonHash,proto3" json:"mint_baton_hash,omitempty"`
	MintBatonVout     uint32 `protobuf:"varint,7,opt,name=mint_baton_vout,json=mintBatonVout,proto3" json:"mint_baton_vout,omitempty"`
}

func (x *SlpTokenMetadata_V1Fungible) Reset() {
	*x = SlpTokenMetadata_V1Fungible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpTokenMetadata_V1Fungible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpTokenMetadata_V1Fungible) ProtoMessage() {}

func (x *SlpTokenMetadata_V1Fungible) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpTokenMetadata_V1Fungible.ProtoReflect.Descriptor instead.
func (*SlpTokenMetadata_V1Fungible) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{59, 0}
}

func (x *SlpTokenMetadata_V1Fungible) GetTokenTicker() string {
	if x != nil {
		return x.TokenTicker
	}
	return ""
}

func (x *SlpTokenMetadata_V1Fungible) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *SlpTokenMetadata_V1Fungible) GetTokenDocumentUrl() string {
	if x != nil {
		return x.TokenDocumentUrl
	}
	return ""
}

func (x *SlpTokenMetadata_V1Fungible) GetTokenDocumentHash() []byte {
	if x != nil {
		return x.TokenDocumentHash
	}
	return nil
}

func (x *SlpTokenMetadata_V1Fungible) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SlpTokenMetadata_V1Fungible) GetMintBatonHash() []byte {
	if x != nil {
		return x.MintBatonHash
	}
	return nil
}

func (x *SlpTokenMetadata_V1Fungible) GetMintBatonVout() uint32 {
	if x != nil {
		return x.MintBatonVout
	}
	return 0
}

// V1NFT1Group is used to marshal metadata specific to NFT1 Group token IDs
type SlpTokenMetadata_V1NFT1Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenTicker       string `protobuf:"bytes,1,opt,name=token_ticker,json=tokenTicker,proto3" json:"token_ticker,omitempty"`
	TokenName         string `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenDocumentUrl  string `protobuf:"bytes,3,opt,name=token_document_url,json=tokenDocumentUrl,proto3" json:"token_document_url,omitempty"`
	TokenDocumentHash []byte `protobuf:"bytes,4,opt,name=token_document_hash,json=tokenDocumentHash,proto3" json:"token_document_hash,omitempty"`
	Decimals          uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MintBatonHash     []byte `protobuf:"bytes,6,opt,name=mint_baton_hash,json=mintBatonHash,proto3" json:"mint_baton_hash,omitempty"`
	MintBatonVout     uint32 `protobuf:"varint,7,opt,name=mint_baton_vout,json=mintBatonVout,proto3" json:"mint_baton_vout,omitempty"`
}

func (x *SlpTokenMetadata_V1NFT1Group) Reset() {
	*x = SlpTokenMetadata_V1NFT1Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpTokenMetadata_V1NFT1Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpTokenMetadata_V1NFT1Group) ProtoMessage() {}

func (x *SlpTokenMetadata_V1NFT1Group) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpTokenMetadata_V1NFT1Group.ProtoReflect.Descriptor instead.
func (*SlpTokenMetadata_V1NFT1Group) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{59, 1}
}

func (x *SlpTokenMetadata_V1NFT1Group) GetTokenTicker() string {
	if x != nil {
		return x.TokenTicker
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Group) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Group) GetTokenDocumentUrl() string {
	if x != nil {
		return x.TokenDocumentUrl
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Group) GetTokenDocumentHash() []byte {
	if x != nil {
		return x.TokenDocumentHash
	}
	return nil
}

func (x *SlpTokenMetadata_V1NFT1Group) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *SlpTokenMetadata_V1NFT1Group) GetMintBatonHash() []byte {
	if x != nil {
		return x.MintBatonHash
	}
	return nil
}

func (x *SlpTokenMetadata_V1NFT1Group) GetMintBatonVout() uint32 {
	if x != nil {
		return x.MintBatonVout
	}
	return 0
}

// V1NFT1Child is used to marshal metadata specific to NFT1 Child token IDs
type SlpTokenMetadata_V1NFT1Child struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenTicker       string `protobuf:"bytes,1,opt,name=token_ticker,json=tokenTicker,proto3" json:"token_ticker,omitempty"`
	TokenName         string `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenDocumentUrl  string `protobuf:"bytes,3,opt,name=token_document_url,json=tokenDocumentUrl,proto3" json:"token_document_url,omitempty"`
	TokenDocumentHash []byte `protobuf:"bytes,4,opt,name=token_document_hash,json=tokenDocumentHash,proto3" json:"token_document_hash,omitempty"`
	GroupId           []byte `protobuf:"bytes,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SlpTokenMetadata_V1NFT1Child) Reset() {
	*x = SlpTokenMetadata_V1NFT1Child{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bchrpc_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlpTokenMetadata_V1NFT1Child) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlpTokenMetadata_V1NFT1Child) ProtoMessage() {}

func (x *SlpTokenMetadata_V1NFT1Child) ProtoReflect() protoreflect.Message {
	mi := &file_bchrpc_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlpTokenMetadata_V1NFT1Child.ProtoReflect.Descriptor instead.
func (*SlpTokenMetadata_V1NFT1Child) Descriptor() ([]byte, []int) {
	return file_bchrpc_proto_rawDescGZIP(), []int{59, 2}
}

func (x *SlpTokenMetadata_V1NFT1Child) GetTokenTicker() string {
	if x != nil {
		return x.TokenTicker
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Child) GetTokenName() string {
	if x != nil {
		return x.TokenName
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Child) GetTokenDocumentUrl() string {
	if x != nil {
		return x.TokenDocumentUrl
	}
	return ""
}

func (x *SlpTokenMetadata_V1NFT1Child) GetTokenDocumentHash() []byte {
	if x != nil {
		return x.TokenDocumentHash
	}
	return nil
}

func (x *SlpTokenMetadata_V1NFT1Child) GetGroupId() []byte {
	if x != nil {
		return x.GroupId
	}
	return nil
}

var File_bchrpc_proto protoreflect.FileDescriptor

var file_bchrpc_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x62, 0x63, 0x68, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22,
	0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xed, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x83, 0x01, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x33, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x78, 0x69, 0x64, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x78,
	0x73, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb2, 0x03,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x62,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x52, 0x0a, 0x62, 0x69, 0x74, 0x63,
	0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x65, 0x73, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6c,
	0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x6c, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6c, 0x70, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x6c, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x22, 0x40, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x4e, 0x65, 0x74, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x41, 0x49, 0x4e, 0x4e, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x47, 0x54, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x45, 0x53, 0x54,
	0x4e, 0x45, 0x54, 0x33, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4d, 0x4e, 0x45, 0x54,
	0x10, 0x03, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12,
	0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x39, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f,
	0x6f, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x56,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x2b, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x59, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x72, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x30,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x3d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x22, 0x61, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x3d, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xac, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x62, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x62, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0xbb, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x18, 0x75, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x62, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e,
	0x62, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x62, 0x5f, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x62, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x95, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x18,
	0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x17,
	0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x8c, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xa2, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbd, 0x02, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x29, 0x0a, 0x09, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3b, 0x0a, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x42, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x6b, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x18, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x73, 0x6c, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x53,
	0x6c, 0x70, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12,
	0x41, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x6c, 0x70, 0x5f,
	0x62, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42, 0x75, 0x72, 0x6e,
	0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53, 0x6c, 0x70, 0x42, 0x75, 0x72,
	0x6e, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6c, 0x70,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x6c, 0x70, 0x5f, 0x62, 0x75, 0x72, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x42, 0x75, 0x72, 0x6e, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x6c, 0x70, 0x42, 0x75, 0x72, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x6a, 0x75, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x75, 0x73,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x65, 0x73, 0x74,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x82, 0x02, 0x0a, 0x1c, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12,
	0x37, 0x0a, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x54, 0x78, 0x22, 0x8d,
	0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66,
	0x75, 0x6c, 0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x39,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x4b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x6c, 0x70, 0x5f, 0x6f, 0x70, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x11, 0x73, 0x6c, 0x70, 0x4f, 0x70, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x73, 0x6c, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x6c, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x76, 0x31, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x47,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x76, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x76,
	0x31, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x76, 0x31, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x07, 0x76, 0x31, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06, 0x76, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x12,
	0x56, 0x0a, 0x15, 0x76, 0x31, 0x5f, 0x6e, 0x66, 0x74, 0x31, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x12, 0x76, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x31, 0x5f, 0x6e, 0x66,
	0x74, 0x31, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x4e, 0x66,
	0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x76, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x6c, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xac, 0x02, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6c,
	0x70, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x19, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x89, 0x01, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76,
	0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f,
	0x6f, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x16, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x8e, 0x04, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x9c, 0x03, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x76, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x56, 0x6f,
	0x75, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x0a, 0x73, 0x6c, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x73, 0x6c, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0f,
	0x76, 0x31, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x31, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x31,
	0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x31, 0x4d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x6f, 0x70, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x6c, 0x70, 0x54,
	0x78, 0x6e, 0x4f, 0x70, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x78, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x78, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x16,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x33, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x6c, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x64, 0x61, 0x74, 0x61, 0x22, 0x88,
	0x02, 0x0a, 0x11, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x34, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xda, 0x02, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x15, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16,
	0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x16, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x84, 0x03, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x62, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf6, 0x01,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x21, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x44, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x83, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x74, 0x78, 0x69, 0x64, 0x73, 0x5f,
	0x6f, 0x72, 0x5f, 0x74, 0x78, 0x73, 0x22, 0xef, 0x07, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x14,
	0x73, 0x6c, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x73, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0xda, 0x02, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x08, 0x73, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x34, 0x0a,
	0x08, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x1a, 0xf2, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75,
	0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x69, 0x73, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x29, 0x0a,
	0x09, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x08,
	0x73, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe6, 0x01, 0x0a, 0x12, 0x4d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x31, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x64, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x65, 0x64, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x1c, 0x0a, 0x0a, 0x66, 0x65, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x6b, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x65, 0x65, 0x50,
	0x65, 0x72, 0x4b, 0x62, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x75, 0x74,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29,
	0x0a, 0x09, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x08, 0x73, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x53, 0x6c,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x6c, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x73, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x73, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6d, 0x69, 0x6e, 0x74,
	0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x4d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x2c, 0x0a, 0x0a, 0x73, 0x6c, 0x70, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x73, 0x6c, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe3,
	0x06, 0x0a, 0x12, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x0a, 0x73, 0x6c, 0x70, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6c, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x6c, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x5f,
	0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x62, 0x75, 0x72, 0x6e,
	0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x42, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x52, 0x09,
	0x62, 0x75, 0x72, 0x6e, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x31, 0x5f,
	0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x76, 0x31, 0x47, 0x65, 0x6e,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x31, 0x5f, 0x6d, 0x69, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31,
	0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x31, 0x4d, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x31, 0x5f, 0x73, 0x65, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70,
	0x56, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x06, 0x76, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x15, 0x76, 0x31, 0x5f, 0x6e,
	0x66, 0x74, 0x31, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70,
	0x56, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73,
	0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x12, 0x76, 0x31,
	0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73,
	0x12, 0x4d, 0x0a, 0x12, 0x76, 0x31, 0x5f, 0x6e, 0x66, 0x74, 0x31, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f,
	0x76, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x22,
	0x36, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x64, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x22, 0xbb, 0x01, 0x0a, 0x09, 0x42, 0x75, 0x72, 0x6e,
	0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x54,
	0x4f, 0x4f, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x55, 0x52,
	0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x4f,
	0x50, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x42, 0x55, 0x52,
	0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x55, 0x52, 0x4e,
	0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4e, 0x47, 0x5f, 0x42, 0x43, 0x48, 0x5f, 0x56, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x26, 0x0a,
	0x22, 0x42, 0x55, 0x52, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x5f, 0x47,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x53, 0x10, 0x04, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x47, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f,
	0x6e, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a,
	0x6d, 0x69, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x53, 0x6c,
	0x70, 0x56, 0x31, 0x4d, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x76, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x6f, 0x6e, 0x56, 0x6f, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01,
	0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x11,
	0x53, 0x6c, 0x70, 0x56, 0x31, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1c, 0x0a, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22,
	0xd5, 0x01, 0x0a, 0x1d, 0x53, 0x6c, 0x70, 0x56, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69,
	0x6c, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x73, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1a, 0x53, 0x6c, 0x70, 0x56, 0x31,
	0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x22, 0xc5, 0x08, 0x0a, 0x10,
	0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x76, 0x31, 0x5f, 0x66, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x31, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x31, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x46, 0x0a, 0x0d, 0x76, 0x31, 0x5f, 0x6e, 0x66, 0x74, 0x31, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x31,
	0x4e, 0x46, 0x54, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x31, 0x4e,
	0x66, 0x74, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x46, 0x0a, 0x0d, 0x76, 0x31, 0x5f, 0x6e,
	0x66, 0x74, 0x31, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x56, 0x31, 0x4e, 0x46, 0x54, 0x31, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x31, 0x4e, 0x66, 0x74, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x1a, 0x98, 0x02, 0x0a, 0x0a, 0x56, 0x31, 0x46, 0x75, 0x6e, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f,
	0x6e, 0x5f, 0x76, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x56, 0x6f, 0x75, 0x74, 0x1a, 0x99, 0x02, 0x0a, 0x0b,
	0x56, 0x31, 0x4e, 0x46, 0x54, 0x31, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f,
	0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x76, 0x6f,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x6f, 0x6e, 0x56, 0x6f, 0x75, 0x74, 0x1a, 0xc8, 0x01, 0x0a, 0x0b, 0x56, 0x31, 0x4e, 0x46,
	0x54, 0x31, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a, 0x0f, 0x53, 0x6c, 0x70, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x42, 0x75, 0x72, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x2e, 0x4f, 0x75, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x48, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x69, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x6f, 0x6e, 0x5f, 0x76, 0x6f, 0x75, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x74, 0x42, 0x61,
	0x74, 0x6f, 0x6e, 0x56, 0x6f, 0x75, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x62, 0x75, 0x72, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x5b, 0x0a, 0x0c, 0x53, 0x6c, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x56, 0x31, 0x5f, 0x46, 0x55, 0x4e, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x10, 0x41, 0x12, 0x12, 0x0a, 0x0d, 0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x10, 0x81, 0x01, 0x2a, 0xb2, 0x02, 0x0a, 0x09, 0x53, 0x6c, 0x70, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x50, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x50, 0x5f, 0x42, 0x55, 0x52,
	0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4c, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x4c, 0x50, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4c, 0x50, 0x5f, 0x56, 0x31, 0x5f,
	0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c, 0x50,
	0x5f, 0x56, 0x31, 0x5f, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4c,
	0x50, 0x5f, 0x56, 0x31, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x4c, 0x50, 0x5f, 0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c,
	0x50, 0x5f, 0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f,
	0x4d, 0x49, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x4c, 0x50, 0x5f, 0x56, 0x31,
	0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x4c, 0x50, 0x5f, 0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54,
	0x31, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x53, 0x49, 0x53, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4c, 0x50, 0x5f,
	0x56, 0x31, 0x5f, 0x4e, 0x46, 0x54, 0x31, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x0b, 0x32, 0xc5, 0x0f, 0x0a, 0x06,
	0x62, 0x63, 0x68, 0x72, 0x70, 0x63, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70,
	0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x12,
	0x15, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x61, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x62, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6a, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x73, 0x70,
	0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6c, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x53, 0x6c, 0x70, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x64, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x6c, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x2e,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x6c, 0x70, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6c, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6c,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x6c,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x15, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x30, 0x01, 0x42, 0x30, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x68, 0x2e, 0x62, 0x63, 0x68, 0x64,
	0x2e, 0x72, 0x70, 0x63, 0x5a, 0x1f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x63, 0x61, 0x73, 0x68, 0x2f, 0x62, 0x63, 0x68, 0x64, 0x2f, 0x62, 0x63, 0x68, 0x72,
	0x70, 0x63, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bchrpc_proto_rawDescOnce sync.Once
	file_bchrpc_proto_rawDescData = file_bchrpc_proto_rawDesc
)

func file_bchrpc_proto_rawDescGZIP() []byte {
	file_bchrpc_proto_rawDescOnce.Do(func() {
		file_bchrpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_bchrpc_proto_rawDescData)
	})
	return file_bchrpc_proto_rawDescData
}

var file_bchrpc_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bchrpc_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_bchrpc_proto_goTypes = []interface{}{
	(SlpTokenType)(0), // 0: pb.SlpTokenType
	(SlpAction)(0),    // 1: pb.SlpAction
	(GetBlockchainInfoResponse_BitcoinNet)(0),              // 2: pb.GetBlockchainInfoResponse.BitcoinNet
	(BlockNotification_Type)(0),                            // 3: pb.BlockNotification.Type
	(TransactionNotification_Type)(0),                      // 4: pb.TransactionNotification.Type
	(SlpTransactionInfo_ValidityJudgement)(0),              // 5: pb.SlpTransactionInfo.ValidityJudgement
	(SlpTransactionInfo_BurnFlags)(0),                      // 6: pb.SlpTransactionInfo.BurnFlags
	(*GetMempoolInfoRequest)(nil),                          // 7: pb.GetMempoolInfoRequest
	(*GetMempoolInfoResponse)(nil),                         // 8: pb.GetMempoolInfoResponse
	(*GetMempoolRequest)(nil),                              // 9: pb.GetMempoolRequest
	(*GetMempoolResponse)(nil),                             // 10: pb.GetMempoolResponse
	(*GetBlockchainInfoRequest)(nil),                       // 11: pb.GetBlockchainInfoRequest
	(*GetBlockchainInfoResponse)(nil),                      // 12: pb.GetBlockchainInfoResponse
	(*GetBlockInfoRequest)(nil),                            // 13: pb.GetBlockInfoRequest
	(*GetBlockInfoResponse)(nil),                           // 14: pb.GetBlockInfoResponse
	(*GetBlockRequest)(nil),                                // 15: pb.GetBlockRequest
	(*GetBlockResponse)(nil),                               // 16: pb.GetBlockResponse
	(*GetRawBlockRequest)(nil),                             // 17: pb.GetRawBlockRequest
	(*GetRawBlockResponse)(nil),                            // 18: pb.GetRawBlockResponse
	(*GetBlockFilterRequest)(nil),                          // 19: pb.GetBlockFilterRequest
	(*GetBlockFilterResponse)(nil),                         // 20: pb.GetBlockFilterResponse
	(*GetHeadersRequest)(nil),                              // 21: pb.GetHeadersRequest
	(*GetHeadersResponse)(nil),                             // 22: pb.GetHeadersResponse
	(*GetTransactionRequest)(nil),                          // 23: pb.GetTransactionRequest
	(*GetTransactionResponse)(nil),                         // 24: pb.GetTransactionResponse
	(*GetRawTransactionRequest)(nil),                       // 25: pb.GetRawTransactionRequest
	(*GetRawTransactionResponse)(nil),                      // 26: pb.GetRawTransactionResponse
	(*GetAddressTransactionsRequest)(nil),                  // 27: pb.GetAddressTransactionsRequest
	(*GetAddressTransactionsResponse)(nil),                 // 28: pb.GetAddressTransactionsResponse
	(*GetRawAddressTransactionsRequest)(nil),               // 29: pb.GetRawAddressTransactionsRequest
	(*GetRawAddressTransactionsResponse)(nil),              // 30: pb.GetRawAddressTransactionsResponse
	(*GetAddressUnspentOutputsRequest)(nil),                // 31: pb.GetAddressUnspentOutputsRequest
	(*GetAddressUnspentOutputsResponse)(nil),               // 32: pb.GetAddressUnspentOutputsResponse
	(*GetUnspentOutputRequest)(nil),                        // 33: pb.GetUnspentOutputRequest
	(*GetUnspentOutputResponse)(nil),                       // 34: pb.GetUnspentOutputResponse
	(*GetMerkleProofRequest)(nil),                          // 35: pb.GetMerkleProofRequest
	(*GetMerkleProofResponse)(nil),                         // 36: pb.GetMerkleProofResponse
	(*SubmitTransactionRequest)(nil),                       // 37: pb.SubmitTransactionRequest
	(*SubmitTransactionResponse)(nil),                      // 38: pb.SubmitTransactionResponse
	(*CheckSlpTransactionRequest)(nil),                     // 39: pb.CheckSlpTransactionRequest
	(*CheckSlpTransactionResponse)(nil),                    // 40: pb.CheckSlpTransactionResponse
	(*SubscribeTransactionsRequest)(nil),                   // 41: pb.SubscribeTransactionsRequest
	(*SubscribeBlocksRequest)(nil),                         // 42: pb.SubscribeBlocksRequest
	(*GetSlpTokenMetadataRequest)(nil),                     // 43: pb.GetSlpTokenMetadataRequest
	(*GetSlpTokenMetadataResponse)(nil),                    // 44: pb.GetSlpTokenMetadataResponse
	(*GetSlpParsedScriptRequest)(nil),                      // 45: pb.GetSlpParsedScriptRequest
	(*GetSlpParsedScriptResponse)(nil),                     // 46: pb.GetSlpParsedScriptResponse
	(*GetSlpTrustedValidationRequest)(nil),                 // 47: pb.GetSlpTrustedValidationRequest
	(*GetSlpTrustedValidationResponse)(nil),                // 48: pb.GetSlpTrustedValidationResponse
	(*GetSlpGraphSearchRequest)(nil),                       // 49: pb.GetSlpGraphSearchRequest
	(*GetSlpGraphSearchResponse)(nil),                      // 50: pb.GetSlpGraphSearchResponse
	(*BlockNotification)(nil),                              // 51: pb.BlockNotification
	(*TransactionNotification)(nil),                        // 52: pb.TransactionNotification
	(*BlockInfo)(nil),                                      // 53: pb.BlockInfo
	(*Block)(nil),                                          // 54: pb.Block
	(*Transaction)(nil),                                    // 55: pb.Transaction
	(*MempoolTransaction)(nil),                             // 56: pb.MempoolTransaction
	(*UnspentOutput)(nil),                                  // 57: pb.UnspentOutput
	(*TransactionFilter)(nil),                              // 58: pb.TransactionFilter
	(*SlpToken)(nil),                                       // 59: pb.SlpToken
	(*SlpTransactionInfo)(nil),                             // 60: pb.SlpTransactionInfo
	(*SlpV1GenesisMetadata)(nil),                           // 61: pb.SlpV1GenesisMetadata
	(*SlpV1MintMetadata)(nil),                              // 62: pb.SlpV1MintMetadata
	(*SlpV1SendMetadata)(nil),                              // 63: pb.SlpV1SendMetadata
	(*SlpV1Nft1ChildGenesisMetadata)(nil),                  // 64: pb.SlpV1Nft1ChildGenesisMetadata
	(*SlpV1Nft1ChildSendMetadata)(nil),                     // 65: pb.SlpV1Nft1ChildSendMetadata
	(*SlpTokenMetadata)(nil),                               // 66: pb.SlpTokenMetadata
	(*SlpRequiredBurn)(nil),                                // 67: pb.SlpRequiredBurn
	(*GetMempoolResponse_TransactionData)(nil),             // 68: pb.GetMempoolResponse.TransactionData
	(*GetSlpTrustedValidationRequest_Query)(nil),           // 69: pb.GetSlpTrustedValidationRequest.Query
	(*GetSlpTrustedValidationResponse_ValidityResult)(nil), // 70: pb.GetSlpTrustedValidationResponse.ValidityResult
	(*Block_TransactionData)(nil),                          // 71: pb.Block.TransactionData
	(*Transaction_Input)(nil),                              // 72: pb.Transaction.Input
	(*Transaction_Output)(nil),                             // 73: pb.Transaction.Output
	(*Transaction_Input_Outpoint)(nil),                     // 74: pb.Transaction.Input.Outpoint
	(*SlpTokenMetadata_V1Fungible)(nil),                    // 75: pb.SlpTokenMetadata.V1Fungible
	(*SlpTokenMetadata_V1NFT1Group)(nil),                   // 76: pb.SlpTokenMetadata.V1NFT1Group
	(*SlpTokenMetadata_V1NFT1Child)(nil),                   // 77: pb.SlpTokenMetadata.V1NFT1Child
}
var file_bchrpc_proto_depIdxs = []int32{
	68, // 0: pb.GetMempoolResponse.transaction_data:type_name -> pb.GetMempoolResponse.TransactionData
	2,  // 1: pb.GetBlockchainInfoResponse.bitcoin_net:type_name -> pb.GetBlockchainInfoResponse.BitcoinNet
	53, // 2: pb.GetBlockInfoResponse.info:type_name -> pb.BlockInfo
	54, // 3: pb.GetBlockResponse.block:type_name -> pb.Block
	53, // 4: pb.GetHeadersResponse.headers:type_name -> pb.BlockInfo
	55, // 5: pb.GetTransactionResponse.transaction:type_name -> pb.Transaction
	66, // 6: pb.GetTransactionResponse.token_metadata:type_name -> pb.SlpTokenMetadata
	55, // 7: pb.GetAddressTransactionsResponse.confirmed_transactions:type_name -> pb.Transaction
	56, // 8: pb.GetAddressTransactionsResponse.unconfirmed_transactions:type_name -> pb.MempoolTransaction
	57, // 9: pb.GetAddressUnspentOutputsResponse.outputs:type_name -> pb.UnspentOutput
	66, // 10: pb.GetAddressUnspentOutputsResponse.token_metadata:type_name -> pb.SlpTokenMetadata
	74, // 11: pb.GetUnspentOutputResponse.outpoint:type_name -> pb.Transaction.Input.Outpoint
	59, // 12: pb.GetUnspentOutputResponse.slp_token:type_name -> pb.SlpToken
	66, // 13: pb.GetUnspentOutputResponse.token_metadata:type_name -> pb.SlpTokenMetadata
	53, // 14: pb.GetMerkleProofResponse.block:type_name -> pb.BlockInfo
	67, // 15: pb.SubmitTransactionRequest.required_slp_burns:type_name -> pb.SlpRequiredBurn
	67, // 16: pb.CheckSlpTransactionRequest.required_slp_burns:type_name -> pb.SlpRequiredBurn
	58, // 17: pb.SubscribeTransactionsRequest.subscribe:type_name -> pb.TransactionFilter
	58, // 18: pb.SubscribeTransactionsRequest.unsubscribe:type_name -> pb.TransactionFilter
	66, // 19: pb.GetSlpTokenMetadataResponse.token_metadata:type_name -> pb.SlpTokenMetadata
	1,  // 20: pb.GetSlpParsedScriptResponse.slp_action:type_name -> pb.SlpAction
	0,  // 21: pb.GetSlpParsedScriptResponse.token_type:type_name -> pb.SlpTokenType
	61, // 22: pb.GetSlpParsedScriptResponse.v1_genesis:type_name -> pb.SlpV1GenesisMetadata
	62, // 23: pb.GetSlpParsedScriptResponse.v1_mint:type_name -> pb.SlpV1MintMetadata
	63, // 24: pb.GetSlpParsedScriptResponse.v1_send:type_name -> pb.SlpV1SendMetadata
	64, // 25: pb.GetSlpParsedScriptResponse.v1_nft1_child_genesis:type_name -> pb.SlpV1Nft1ChildGenesisMetadata
	65, // 26: pb.GetSlpParsedScriptResponse.v1_nft1_child_send:type_name -> pb.SlpV1Nft1ChildSendMetadata
	69, // 27: pb.GetSlpTrustedValidationRequest.queries:type_name -> pb.GetSlpTrustedValidationRequest.Query
	70, // 28: pb.GetSlpTrustedValidationResponse.results:type_name -> pb.GetSlpTrustedValidationResponse.ValidityResult
	3,  // 29: pb.BlockNotification.type:type_name -> pb.BlockNotification.Type
	53, // 30: pb.BlockNotification.block_info:type_name -> pb.BlockInfo
	54, // 31: pb.BlockNotification.marshaled_block:type_name -> pb.Block
	4,  // 32: pb.TransactionNotification.type:type_name -> pb.TransactionNotification.Type
	55, // 33: pb.TransactionNotification.confirmed_transaction:type_name -> pb.Transaction
	56, // 34: pb.TransactionNotification.unconfirmed_transaction:type_name -> pb.MempoolTransaction
	53, // 35: pb.Block.info:type_name -> pb.BlockInfo
	71, // 36: pb.Block.transaction_data:type_name -> pb.Block.TransactionData
	72, // 37: pb.Transaction.inputs:type_name -> pb.Transaction.Input
	73, // 38: pb.Transaction.outputs:type_name -> pb.Transaction.Output
	60, // 39: pb.Transaction.slp_transaction_info:type_name -> pb.SlpTransactionInfo
	55, // 40: pb.MempoolTransaction.transaction:type_name -> pb.Transaction
	74, // 41: pb.UnspentOutput.outpoint:type_name -> pb.Transaction.Input.Outpoint
	59, // 42: pb.UnspentOutput.slp_token:type_name -> pb.SlpToken
	74, // 43: pb.TransactionFilter.outpoints:type_name -> pb.Transaction.Input.Outpoint
	1,  // 44: pb.SlpToken.slp_action:type_name -> pb.SlpAction
	0,  // 45: pb.SlpToken.token_type:type_name -> pb.SlpTokenType
	1,  // 46: pb.SlpTransactionInfo.slp_action:type_name -> pb.SlpAction
	5,  // 47: pb.SlpTransactionInfo.validity_judgement:type_name -> pb.SlpTransactionInfo.ValidityJudgement
	6,  // 48: pb.SlpTransactionInfo.burn_flags:type_name -> pb.SlpTransactionInfo.BurnFlags
	61, // 49: pb.SlpTransactionInfo.v1_genesis:type_name -> pb.SlpV1GenesisMetadata
	62, // 50: pb.SlpTransactionInfo.v1_mint:type_name -> pb.SlpV1MintMetadata
	63, // 51: pb.SlpTransactionInfo.v1_send:type_name -> pb.SlpV1SendMetadata
	64, // 52: pb.SlpTransactionInfo.v1_nft1_child_genesis:type_name -> pb.SlpV1Nft1ChildGenesisMetadata
	65, // 53: pb.SlpTransactionInfo.v1_nft1_child_send:type_name -> pb.SlpV1Nft1ChildSendMetadata
	0,  // 54: pb.SlpTokenMetadata.token_type:type_name -> pb.SlpTokenType
	75, // 55: pb.SlpTokenMetadata.v1_fungible:type_name -> pb.SlpTokenMetadata.V1Fungible
	76, // 56: pb.SlpTokenMetadata.v1_nft1_group:type_name -> pb.SlpTokenMetadata.V1NFT1Group
	77, // 57: pb.SlpTokenMetadata.v1_nft1_child:type_name -> pb.SlpTokenMetadata.V1NFT1Child
	74, // 58: pb.SlpRequiredBurn.outpoint:type_name -> pb.Transaction.Input.Outpoint
	0,  // 59: pb.SlpRequiredBurn.token_type:type_name -> pb.SlpTokenType
	55, // 60: pb.GetMempoolResponse.TransactionData.transaction:type_name -> pb.Transaction
	1,  // 61: pb.GetSlpTrustedValidationResponse.ValidityResult.slp_action:type_name -> pb.SlpAction
	0,  // 62: pb.GetSlpTrustedValidationResponse.ValidityResult.token_type:type_name -> pb.SlpTokenType
	55, // 63: pb.Block.TransactionData.transaction:type_name -> pb.Transaction
	74, // 64: pb.Transaction.Input.outpoint:type_name -> pb.Transaction.Input.Outpoint
	59, // 65: pb.Transaction.Input.slp_token:type_name -> pb.SlpToken
	59, // 66: pb.Transaction.Output.slp_token:type_name -> pb.SlpToken
	7,  // 67: pb.bchrpc.GetMempoolInfo:input_type -> pb.GetMempoolInfoRequest
	9,  // 68: pb.bchrpc.GetMempool:input_type -> pb.GetMempoolRequest
	11, // 69: pb.bchrpc.GetBlockchainInfo:input_type -> pb.GetBlockchainInfoRequest
	13, // 70: pb.bchrpc.GetBlockInfo:input_type -> pb.GetBlockInfoRequest
	15, // 71: pb.bchrpc.GetBlock:input_type -> pb.GetBlockRequest
	17, // 72: pb.bchrpc.GetRawBlock:input_type -> pb.GetRawBlockRequest
	19, // 73: pb.bchrpc.GetBlockFilter:input_type -> pb.GetBlockFilterRequest
	21, // 74: pb.bchrpc.GetHeaders:input_type -> pb.GetHeadersRequest
	23, // 75: pb.bchrpc.GetTransaction:input_type -> pb.GetTransactionRequest
	25, // 76: pb.bchrpc.GetRawTransaction:input_type -> pb.GetRawTransactionRequest
	27, // 77: pb.bchrpc.GetAddressTransactions:input_type -> pb.GetAddressTransactionsRequest
	29, // 78: pb.bchrpc.GetRawAddressTransactions:input_type -> pb.GetRawAddressTransactionsRequest
	31, // 79: pb.bchrpc.GetAddressUnspentOutputs:input_type -> pb.GetAddressUnspentOutputsRequest
	33, // 80: pb.bchrpc.GetUnspentOutput:input_type -> pb.GetUnspentOutputRequest
	35, // 81: pb.bchrpc.GetMerkleProof:input_type -> pb.GetMerkleProofRequest
	43, // 82: pb.bchrpc.GetSlpTokenMetadata:input_type -> pb.GetSlpTokenMetadataRequest
	45, // 83: pb.bchrpc.GetSlpParsedScript:input_type -> pb.GetSlpParsedScriptRequest
	47, // 84: pb.bchrpc.GetSlpTrustedValidation:input_type -> pb.GetSlpTrustedValidationRequest
	49, // 85: pb.bchrpc.GetSlpGraphSearch:input_type -> pb.GetSlpGraphSearchRequest
	39, // 86: pb.bchrpc.CheckSlpTransaction:input_type -> pb.CheckSlpTransactionRequest
	37, // 87: pb.bchrpc.SubmitTransaction:input_type -> pb.SubmitTransactionRequest
	41, // 88: pb.bchrpc.SubscribeTransactions:input_type -> pb.SubscribeTransactionsRequest
	41, // 89: pb.bchrpc.SubscribeTransactionStream:input_type -> pb.SubscribeTransactionsRequest
	42, // 90: pb.bchrpc.SubscribeBlocks:input_type -> pb.SubscribeBlocksRequest
	8,  // 91: pb.bchrpc.GetMempoolInfo:output_type -> pb.GetMempoolInfoResponse
	10, // 92: pb.bchrpc.GetMempool:output_type -> pb.GetMempoolResponse
	12, // 93: pb.bchrpc.GetBlockchainInfo:output_type -> pb.GetBlockchainInfoResponse
	14, // 94: pb.bchrpc.GetBlockInfo:output_type -> pb.GetBlockInfoResponse
	16, // 95: pb.bchrpc.GetBlock:output_type -> pb.GetBlockResponse
	18, // 96: pb.bchrpc.GetRawBlock:output_type -> pb.GetRawBlockResponse
	20, // 97: pb.bchrpc.GetBlockFilter:output_type -> pb.GetBlockFilterResponse
	22, // 98: pb.bchrpc.GetHeaders:output_type -> pb.GetHeadersResponse
	24, // 99: pb.bchrpc.GetTransaction:output_type -> pb.GetTransactionResponse
	26, // 100: pb.bchrpc.GetRawTransaction:output_type -> pb.GetRawTransactionResponse
	28, // 101: pb.bchrpc.GetAddressTransactions:output_type -> pb.GetAddressTransactionsResponse
	30, // 102: pb.bchrpc.GetRawAddressTransactions:output_type -> pb.GetRawAddressTransactionsResponse
	32, // 103: pb.bchrpc.GetAddressUnspentOutputs:output_type -> pb.GetAddressUnspentOutputsResponse
	34, // 104: pb.bchrpc.GetUnspentOutput:output_type -> pb.GetUnspentOutputResponse
	36, // 105: pb.bchrpc.GetMerkleProof:output_type -> pb.GetMerkleProofResponse
	44, // 106: pb.bchrpc.GetSlpTokenMetadata:output_type -> pb.GetSlpTokenMetadataResponse
	46, // 107: pb.bchrpc.GetSlpParsedScript:output_type -> pb.GetSlpParsedScriptResponse
	48, // 108: pb.bchrpc.GetSlpTrustedValidation:output_type -> pb.GetSlpTrustedValidationResponse
	50, // 109: pb.bchrpc.GetSlpGraphSearch:output_type -> pb.GetSlpGraphSearchResponse
	40, // 110: pb.bchrpc.CheckSlpTransaction:output_type -> pb.CheckSlpTransactionResponse
	38, // 111: pb.bchrpc.SubmitTransaction:output_type -> pb.SubmitTransactionResponse
	52, // 112: pb.bchrpc.SubscribeTransactions:output_type -> pb.TransactionNotification
	52, // 113: pb.bchrpc.SubscribeTransactionStream:output_type -> pb.TransactionNotification
	51, // 114: pb.bchrpc.SubscribeBlocks:output_type -> pb.BlockNotification
	91, // [91:115] is the sub-list for method output_type
	67, // [67:91] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_bchrpc_proto_init() }
func file_bchrpc_proto_init() {
	if File_bchrpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bchrpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockchainInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFilterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlockFilterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawAddressTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRawAddressTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressUnspentOutputsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressUnspentOutputsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnspentOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUnspentOutputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMerkleProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSlpTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckSlpTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeBlocksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTokenMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTokenMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpParsedScriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpParsedScriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTrustedValidationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTrustedValidationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpGraphSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpGraphSearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnspentOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpTransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpV1GenesisMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpV1MintMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpV1SendMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpV1Nft1ChildGenesisMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpV1Nft1ChildSendMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpTokenMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpRequiredBurn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMempoolResponse_TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTrustedValidationRequest_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSlpTrustedValidationResponse_ValidityResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block_TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction_Input_Outpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpTokenMetadata_V1Fungible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpTokenMetadata_V1NFT1Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bchrpc_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlpTokenMetadata_V1NFT1Child); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bchrpc_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*GetBlockInfoRequest_Hash)(nil),
		(*GetBlockInfoRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*GetBlockRequest_Hash)(nil),
		(*GetBlockRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*GetRawBlockRequest_Hash)(nil),
		(*GetRawBlockRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*GetBlockFilterRequest_Hash)(nil),
		(*GetBlockFilterRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*GetAddressTransactionsRequest_Hash)(nil),
		(*GetAddressTransactionsRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*GetRawAddressTransactionsRequest_Hash)(nil),
		(*GetRawAddressTransactionsRequest_Height)(nil),
	}
	file_bchrpc_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*GetSlpParsedScriptResponse_V1Genesis)(nil),
		(*GetSlpParsedScriptResponse_V1Mint)(nil),
		(*GetSlpParsedScriptResponse_V1Send)(nil),
		(*GetSlpParsedScriptResponse_V1Nft1ChildGenesis)(nil),
		(*GetSlpParsedScriptResponse_V1Nft1ChildSend)(nil),
	}
	file_bchrpc_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*BlockNotification_BlockInfo)(nil),
		(*BlockNotification_MarshaledBlock)(nil),
		(*BlockNotification_SerializedBlock)(nil),
	}
	file_bchrpc_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*TransactionNotification_ConfirmedTransaction)(nil),
		(*TransactionNotification_UnconfirmedTransaction)(nil),
		(*TransactionNotification_SerializedTransaction)(nil),
	}
	file_bchrpc_proto_msgTypes[53].OneofWrappers = []interface{}{
		(*SlpTransactionInfo_V1Genesis)(nil),
		(*SlpTransactionInfo_V1Mint)(nil),
		(*SlpTransactionInfo_V1Send)(nil),
		(*SlpTransactionInfo_V1Nft1ChildGenesis)(nil),
		(*SlpTransactionInfo_V1Nft1ChildSend)(nil),
	}
	file_bchrpc_proto_msgTypes[59].OneofWrappers = []interface{}{
		(*SlpTokenMetadata_V1Fungible_)(nil),
		(*SlpTokenMetadata_V1Nft1Group)(nil),
		(*SlpTokenMetadata_V1Nft1Child)(nil),
	}
	file_bchrpc_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*SlpRequiredBurn_Amount)(nil),
		(*SlpRequiredBurn_MintBatonVout)(nil),
	}
	file_bchrpc_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*GetMempoolResponse_TransactionData_TransactionHash)(nil),
		(*GetMempoolResponse_TransactionData_Transaction)(nil),
	}
	file_bchrpc_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*GetSlpTrustedValidationResponse_ValidityResult_V1TokenAmount)(nil),
		(*GetSlpTrustedValidationResponse_ValidityResult_V1MintBaton)(nil),
	}
	file_bchrpc_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*Block_TransactionData_TransactionHash)(nil),
		(*Block_TransactionData_Transaction)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bchrpc_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bchrpc_proto_goTypes,
		DependencyIndexes: file_bchrpc_proto_depIdxs,
		EnumInfos:         file_bchrpc_proto_enumTypes,
		MessageInfos:      file_bchrpc_proto_msgTypes,
	}.Build()
	File_bchrpc_proto = out.File
	file_bchrpc_proto_rawDesc = nil
	file_bchrpc_proto_goTypes = nil
	file_bchrpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BchrpcClient is the client API for Bchrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BchrpcClient interface {
	// GetMempoolInfo returns the state of the current mempool.
	GetMempoolInfo(ctx context.Context, in *GetMempoolInfoRequest, opts ...grpc.CallOption) (*GetMempoolInfoResponse, error)
	// GetMempool returns information about all transactions currently in the memory pool.
	// Offers an option to return full transactions or just transactions hashes.
	GetMempool(ctx context.Context, in *GetMempoolRequest, opts ...grpc.CallOption) (*GetMempoolResponse, error)
	// GetBlockchainInfo returns data about the blockchain including the most recent
	// block hash and height.
	GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error)
	// GetBlockInfo returns metadata and info for a specified block.
	GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error)
	// GetBlock returns detailed data for a block.
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	// GetRawBlock returns a block in a serialized format.
	GetRawBlock(ctx context.Context, in *GetRawBlockRequest, opts ...grpc.CallOption) (*GetRawBlockResponse, error)
	// GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.
	//
	// **Requires CfIndex**
	GetBlockFilter(ctx context.Context, in *GetBlockFilterRequest, opts ...grpc.CallOption) (*GetBlockFilterResponse, error)
	// GetHeaders takes a block locator object and returns a batch of no more than 2000
	// headers. Upon parsing the block locator, if the server concludes there has been a
	// fork, it will send headers starting at the fork point, or genesis if no blocks in
	// the locator are in the best chain. If the locator is already at the tip no headers
	// will be returned.
	// see: bchd/bchrpc/documentation/wallet_operation.md
	GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error)
	// GetTransaction returns a transaction given a transaction hash.
	//
	// **Requires TxIndex**
	// **Requires SlpIndex for slp related information **
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// GetRawTransaction returns a serialized transaction given a transaction hash.
	//
	// **Requires TxIndex**
	GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*GetRawTransactionResponse, error)
	// GetAddressTransactions returns the transactions for the given address. Offers offset,
	// limit, and from block options.
	//
	// **Requires AddressIndex**
	// **Requires SlpIndex for slp related information **
	GetAddressTransactions(ctx context.Context, in *GetAddressTransactionsRequest, opts ...grpc.CallOption) (*GetAddressTransactionsResponse, error)
	// GetRawAddressTransactions the serialized raw transactions for
	// the given address. Offers offset, limit, and from block options.
	//
	// **Requires AddressIndex**
	GetRawAddressTransactions(ctx context.Context, in *GetRawAddressTransactionsRequest, opts ...grpc.CallOption) (*GetRawAddressTransactionsResponse, error)
	// GetAddressUnspentOutputs returns all the unspent transaction outputs
	// for the given address.
	//
	// **Requires AddressIndex**
	// **Requires SlpIndex for slp related information **
	GetAddressUnspentOutputs(ctx context.Context, in *GetAddressUnspentOutputsRequest, opts ...grpc.CallOption) (*GetAddressUnspentOutputsResponse, error)
	// GetUnspentOutput takes an unspent output in the utxo set and returns
	// the utxo metadata or not found.
	//
	// **Requires SlpIndex for slp related information **
	GetUnspentOutput(ctx context.Context, in *GetUnspentOutputRequest, opts ...grpc.CallOption) (*GetUnspentOutputResponse, error)
	// GetMerkleProof returns a Merkle (SPV) proof for a specific transaction
	// in the provided block.
	//
	// **Requires TxIndex**
	GetMerkleProof(ctx context.Context, in *GetMerkleProofRequest, opts ...grpc.CallOption) (*GetMerkleProofResponse, error)
	// GetSlpTokenMetadata return slp token metadata for one or more tokens.
	//
	// **Requires SlpIndex**
	GetSlpTokenMetadata(ctx context.Context, in *GetSlpTokenMetadataRequest, opts ...grpc.CallOption) (*GetSlpTokenMetadataResponse, error)
	// GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript
	// using goslp package.  This endpoint does not require SlpIndex.
	GetSlpParsedScript(ctx context.Context, in *GetSlpParsedScriptRequest, opts ...grpc.CallOption) (*GetSlpParsedScriptResponse, error)
	// GetSlpTrustedValidation returns slp validity related information for one or more transactions.
	//
	// **Requires SlpIndex**
	GetSlpTrustedValidation(ctx context.Context, in *GetSlpTrustedValidationRequest, opts ...grpc.CallOption) (*GetSlpTrustedValidationResponse, error)
	// GraphSearch returns all the transactions needed for a client to validate an SLP graph
	//
	// **Requires SlpIndex and SlpGraphSearch**
	GetSlpGraphSearch(ctx context.Context, in *GetSlpGraphSearchRequest, opts ...grpc.CallOption) (*GetSlpGraphSearchResponse, error)
	// CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.
	CheckSlpTransaction(ctx context.Context, in *CheckSlpTransactionRequest, opts ...grpc.CallOption) (*CheckSlpTransactionResponse, error)
	// Submit a transaction to all connected peers.
	SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error)
	// SubscribeTransactions creates subscription to all relevant transactions based on
	// the subscription filter.
	//
	// This RPC does not use bidirectional streams and therefore can be used
	// with grpc-web. You will need to close and reopen the stream whenever
	// you want to update the subscription filter. If you are not using grpc-web
	// then SubscribeTransactionStream is more appropriate.
	//
	// **Requires TxIndex to receive input metadata**
	// **Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**
	SubscribeTransactions(ctx context.Context, in *SubscribeTransactionsRequest, opts ...grpc.CallOption) (Bchrpc_SubscribeTransactionsClient, error)
	// SubscribeTransactionStream subscribes to relevant transactions based on
	// the subscription requests. The parameters to filter transactions on can
	// be updated by sending new SubscribeTransactionsRequest objects on the stream.
	//
	// NOTE: Because this RPC is using bi-directional streaming it cannot be used with
	// grpc-web.
	//
	// **Requires TxIndex to receive input metadata**
	SubscribeTransactionStream(ctx context.Context, opts ...grpc.CallOption) (Bchrpc_SubscribeTransactionStreamClient, error)
	// SubscribeBlocks creates a subscription for notifications of new blocks being
	// connected to the blockchain or blocks being disconnected.
	SubscribeBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (Bchrpc_SubscribeBlocksClient, error)
}

type bchrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewBchrpcClient(cc grpc.ClientConnInterface) BchrpcClient {
	return &bchrpcClient{cc}
}

func (c *bchrpcClient) GetMempoolInfo(ctx context.Context, in *GetMempoolInfoRequest, opts ...grpc.CallOption) (*GetMempoolInfoResponse, error) {
	out := new(GetMempoolInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetMempoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetMempool(ctx context.Context, in *GetMempoolRequest, opts ...grpc.CallOption) (*GetMempoolResponse, error) {
	out := new(GetMempoolResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetMempool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetBlockchainInfo(ctx context.Context, in *GetBlockchainInfoRequest, opts ...grpc.CallOption) (*GetBlockchainInfoResponse, error) {
	out := new(GetBlockchainInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetBlockchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetBlockInfo(ctx context.Context, in *GetBlockInfoRequest, opts ...grpc.CallOption) (*GetBlockInfoResponse, error) {
	out := new(GetBlockInfoResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetBlockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetRawBlock(ctx context.Context, in *GetRawBlockRequest, opts ...grpc.CallOption) (*GetRawBlockResponse, error) {
	out := new(GetRawBlockResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetRawBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetBlockFilter(ctx context.Context, in *GetBlockFilterRequest, opts ...grpc.CallOption) (*GetBlockFilterResponse, error) {
	out := new(GetBlockFilterResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetBlockFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetHeaders(ctx context.Context, in *GetHeadersRequest, opts ...grpc.CallOption) (*GetHeadersResponse, error) {
	out := new(GetHeadersResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetRawTransaction(ctx context.Context, in *GetRawTransactionRequest, opts ...grpc.CallOption) (*GetRawTransactionResponse, error) {
	out := new(GetRawTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetAddressTransactions(ctx context.Context, in *GetAddressTransactionsRequest, opts ...grpc.CallOption) (*GetAddressTransactionsResponse, error) {
	out := new(GetAddressTransactionsResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetAddressTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetRawAddressTransactions(ctx context.Context, in *GetRawAddressTransactionsRequest, opts ...grpc.CallOption) (*GetRawAddressTransactionsResponse, error) {
	out := new(GetRawAddressTransactionsResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetRawAddressTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetAddressUnspentOutputs(ctx context.Context, in *GetAddressUnspentOutputsRequest, opts ...grpc.CallOption) (*GetAddressUnspentOutputsResponse, error) {
	out := new(GetAddressUnspentOutputsResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetAddressUnspentOutputs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetUnspentOutput(ctx context.Context, in *GetUnspentOutputRequest, opts ...grpc.CallOption) (*GetUnspentOutputResponse, error) {
	out := new(GetUnspentOutputResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetUnspentOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetMerkleProof(ctx context.Context, in *GetMerkleProofRequest, opts ...grpc.CallOption) (*GetMerkleProofResponse, error) {
	out := new(GetMerkleProofResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetMerkleProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetSlpTokenMetadata(ctx context.Context, in *GetSlpTokenMetadataRequest, opts ...grpc.CallOption) (*GetSlpTokenMetadataResponse, error) {
	out := new(GetSlpTokenMetadataResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetSlpTokenMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetSlpParsedScript(ctx context.Context, in *GetSlpParsedScriptRequest, opts ...grpc.CallOption) (*GetSlpParsedScriptResponse, error) {
	out := new(GetSlpParsedScriptResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetSlpParsedScript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetSlpTrustedValidation(ctx context.Context, in *GetSlpTrustedValidationRequest, opts ...grpc.CallOption) (*GetSlpTrustedValidationResponse, error) {
	out := new(GetSlpTrustedValidationResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetSlpTrustedValidation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) GetSlpGraphSearch(ctx context.Context, in *GetSlpGraphSearchRequest, opts ...grpc.CallOption) (*GetSlpGraphSearchResponse, error) {
	out := new(GetSlpGraphSearchResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/GetSlpGraphSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) CheckSlpTransaction(ctx context.Context, in *CheckSlpTransactionRequest, opts ...grpc.CallOption) (*CheckSlpTransactionResponse, error) {
	out := new(CheckSlpTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/CheckSlpTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) SubmitTransaction(ctx context.Context, in *SubmitTransactionRequest, opts ...grpc.CallOption) (*SubmitTransactionResponse, error) {
	out := new(SubmitTransactionResponse)
	err := c.cc.Invoke(ctx, "/pb.bchrpc/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bchrpcClient) SubscribeTransactions(ctx context.Context, in *SubscribeTransactionsRequest, opts ...grpc.CallOption) (Bchrpc_SubscribeTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bchrpc_serviceDesc.Streams[0], "/pb.bchrpc/SubscribeTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &bchrpcSubscribeTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bchrpc_SubscribeTransactionsClient interface {
	Recv() (*TransactionNotification, error)
	grpc.ClientStream
}

type bchrpcSubscribeTransactionsClient struct {
	grpc.ClientStream
}

func (x *bchrpcSubscribeTransactionsClient) Recv() (*TransactionNotification, error) {
	m := new(TransactionNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bchrpcClient) SubscribeTransactionStream(ctx context.Context, opts ...grpc.CallOption) (Bchrpc_SubscribeTransactionStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bchrpc_serviceDesc.Streams[1], "/pb.bchrpc/SubscribeTransactionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bchrpcSubscribeTransactionStreamClient{stream}
	return x, nil
}

type Bchrpc_SubscribeTransactionStreamClient interface {
	Send(*SubscribeTransactionsRequest) error
	Recv() (*TransactionNotification, error)
	grpc.ClientStream
}

type bchrpcSubscribeTransactionStreamClient struct {
	grpc.ClientStream
}

func (x *bchrpcSubscribeTransactionStreamClient) Send(m *SubscribeTransactionsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bchrpcSubscribeTransactionStreamClient) Recv() (*TransactionNotification, error) {
	m := new(TransactionNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bchrpcClient) SubscribeBlocks(ctx context.Context, in *SubscribeBlocksRequest, opts ...grpc.CallOption) (Bchrpc_SubscribeBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Bchrpc_serviceDesc.Streams[2], "/pb.bchrpc/SubscribeBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &bchrpcSubscribeBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bchrpc_SubscribeBlocksClient interface {
	Recv() (*BlockNotification, error)
	grpc.ClientStream
}

type bchrpcSubscribeBlocksClient struct {
	grpc.ClientStream
}

func (x *bchrpcSubscribeBlocksClient) Recv() (*BlockNotification, error) {
	m := new(BlockNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BchrpcServer is the server API for Bchrpc service.
type BchrpcServer interface {
	// GetMempoolInfo returns the state of the current mempool.
	GetMempoolInfo(context.Context, *GetMempoolInfoRequest) (*GetMempoolInfoResponse, error)
	// GetMempool returns information about all transactions currently in the memory pool.
	// Offers an option to return full transactions or just transactions hashes.
	GetMempool(context.Context, *GetMempoolRequest) (*GetMempoolResponse, error)
	// GetBlockchainInfo returns data about the blockchain including the most recent
	// block hash and height.
	GetBlockchainInfo(context.Context, *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error)
	// GetBlockInfo returns metadata and info for a specified block.
	GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error)
	// GetBlock returns detailed data for a block.
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	// GetRawBlock returns a block in a serialized format.
	GetRawBlock(context.Context, *GetRawBlockRequest) (*GetRawBlockResponse, error)
	// GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.
	//
	// **Requires CfIndex**
	GetBlockFilter(context.Context, *GetBlockFilterRequest) (*GetBlockFilterResponse, error)
	// GetHeaders takes a block locator object and returns a batch of no more than 2000
	// headers. Upon parsing the block locator, if the server concludes there has been a
	// fork, it will send headers starting at the fork point, or genesis if no blocks in
	// the locator are in the best chain. If the locator is already at the tip no headers
	// will be returned.
	// see: bchd/bchrpc/documentation/wallet_operation.md
	GetHeaders(context.Context, *GetHeadersRequest) (*GetHeadersResponse, error)
	// GetTransaction returns a transaction given a transaction hash.
	//
	// **Requires TxIndex**
	// **Requires SlpIndex for slp related information **
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	// GetRawTransaction returns a serialized transaction given a transaction hash.
	//
	// **Requires TxIndex**
	GetRawTransaction(context.Context, *GetRawTransactionRequest) (*GetRawTransactionResponse, error)
	// GetAddressTransactions returns the transactions for the given address. Offers offset,
	// limit, and from block options.
	//
	// **Requires AddressIndex**
	// **Requires SlpIndex for slp related information **
	GetAddressTransactions(context.Context, *GetAddressTransactionsRequest) (*GetAddressTransactionsResponse, error)
	// GetRawAddressTransactions the serialized raw transactions for
	// the given address. Offers offset, limit, and from block options.
	//
	// **Requires AddressIndex**
	GetRawAddressTransactions(context.Context, *GetRawAddressTransactionsRequest) (*GetRawAddressTransactionsResponse, error)
	// GetAddressUnspentOutputs returns all the unspent transaction outputs
	// for the given address.
	//
	// **Requires AddressIndex**
	// **Requires SlpIndex for slp related information **
	GetAddressUnspentOutputs(context.Context, *GetAddressUnspentOutputsRequest) (*GetAddressUnspentOutputsResponse, error)
	// GetUnspentOutput takes an unspent output in the utxo set and returns
	// the utxo metadata or not found.
	//
	// **Requires SlpIndex for slp related information **
	GetUnspentOutput(context.Context, *GetUnspentOutputRequest) (*GetUnspentOutputResponse, error)
	// GetMerkleProof returns a Merkle (SPV) proof for a specific transaction
	// in the provided block.
	//
	// **Requires TxIndex**
	GetMerkleProof(context.Context, *GetMerkleProofRequest) (*GetMerkleProofResponse, error)
	// GetSlpTokenMetadata return slp token metadata for one or more tokens.
	//
	// **Requires SlpIndex**
	GetSlpTokenMetadata(context.Context, *GetSlpTokenMetadataRequest) (*GetSlpTokenMetadataResponse, error)
	// GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript
	// using goslp package.  This endpoint does not require SlpIndex.
	GetSlpParsedScript(context.Context, *GetSlpParsedScriptRequest) (*GetSlpParsedScriptResponse, error)
	// GetSlpTrustedValidation returns slp validity related information for one or more transactions.
	//
	// **Requires SlpIndex**
	GetSlpTrustedValidation(context.Context, *GetSlpTrustedValidationRequest) (*GetSlpTrustedValidationResponse, error)
	// GraphSearch returns all the transactions needed for a client to validate an SLP graph
	//
	// **Requires SlpIndex and SlpGraphSearch**
	GetSlpGraphSearch(context.Context, *GetSlpGraphSearchRequest) (*GetSlpGraphSearchResponse, error)
	// CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.
	CheckSlpTransaction(context.Context, *CheckSlpTransactionRequest) (*CheckSlpTransactionResponse, error)
	// Submit a transaction to all connected peers.
	SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error)
	// SubscribeTransactions creates subscription to all relevant transactions based on
	// the subscription filter.
	//
	// This RPC does not use bidirectional streams and therefore can be used
	// with grpc-web. You will need to close and reopen the stream whenever
	// you want to update the subscription filter. If you are not using grpc-web
	// then SubscribeTransactionStream is more appropriate.
	//
	// **Requires TxIndex to receive input metadata**
	// **Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**
	SubscribeTransactions(*SubscribeTransactionsRequest, Bchrpc_SubscribeTransactionsServer) error
	// SubscribeTransactionStream subscribes to relevant transactions based on
	// the subscription requests. The parameters to filter transactions on can
	// be updated by sending new SubscribeTransactionsRequest objects on the stream.
	//
	// NOTE: Because this RPC is using bi-directional streaming it cannot be used with
	// grpc-web.
	//
	// **Requires TxIndex to receive input metadata**
	SubscribeTransactionStream(Bchrpc_SubscribeTransactionStreamServer) error
	// SubscribeBlocks creates a subscription for notifications of new blocks being
	// connected to the blockchain or blocks being disconnected.
	SubscribeBlocks(*SubscribeBlocksRequest, Bchrpc_SubscribeBlocksServer) error
}

// UnimplementedBchrpcServer can be embedded to have forward compatible implementations.
type UnimplementedBchrpcServer struct {
}

func (*UnimplementedBchrpcServer) GetMempoolInfo(context.Context, *GetMempoolInfoRequest) (*GetMempoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempoolInfo not implemented")
}
func (*UnimplementedBchrpcServer) GetMempool(context.Context, *GetMempoolRequest) (*GetMempoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMempool not implemented")
}
func (*UnimplementedBchrpcServer) GetBlockchainInfo(context.Context, *GetBlockchainInfoRequest) (*GetBlockchainInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockchainInfo not implemented")
}
func (*UnimplementedBchrpcServer) GetBlockInfo(context.Context, *GetBlockInfoRequest) (*GetBlockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockInfo not implemented")
}
func (*UnimplementedBchrpcServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (*UnimplementedBchrpcServer) GetRawBlock(context.Context, *GetRawBlockRequest) (*GetRawBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawBlock not implemented")
}
func (*UnimplementedBchrpcServer) GetBlockFilter(context.Context, *GetBlockFilterRequest) (*GetBlockFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockFilter not implemented")
}
func (*UnimplementedBchrpcServer) GetHeaders(context.Context, *GetHeadersRequest) (*GetHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaders not implemented")
}
func (*UnimplementedBchrpcServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (*UnimplementedBchrpcServer) GetRawTransaction(context.Context, *GetRawTransactionRequest) (*GetRawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawTransaction not implemented")
}
func (*UnimplementedBchrpcServer) GetAddressTransactions(context.Context, *GetAddressTransactionsRequest) (*GetAddressTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressTransactions not implemented")
}
func (*UnimplementedBchrpcServer) GetRawAddressTransactions(context.Context, *GetRawAddressTransactionsRequest) (*GetRawAddressTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawAddressTransactions not implemented")
}
func (*UnimplementedBchrpcServer) GetAddressUnspentOutputs(context.Context, *GetAddressUnspentOutputsRequest) (*GetAddressUnspentOutputsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressUnspentOutputs not implemented")
}
func (*UnimplementedBchrpcServer) GetUnspentOutput(context.Context, *GetUnspentOutputRequest) (*GetUnspentOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnspentOutput not implemented")
}
func (*UnimplementedBchrpcServer) GetMerkleProof(context.Context, *GetMerkleProofRequest) (*GetMerkleProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleProof not implemented")
}
func (*UnimplementedBchrpcServer) GetSlpTokenMetadata(context.Context, *GetSlpTokenMetadataRequest) (*GetSlpTokenMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlpTokenMetadata not implemented")
}
func (*UnimplementedBchrpcServer) GetSlpParsedScript(context.Context, *GetSlpParsedScriptRequest) (*GetSlpParsedScriptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlpParsedScript not implemented")
}
func (*UnimplementedBchrpcServer) GetSlpTrustedValidation(context.Context, *GetSlpTrustedValidationRequest) (*GetSlpTrustedValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlpTrustedValidation not implemented")
}
func (*UnimplementedBchrpcServer) GetSlpGraphSearch(context.Context, *GetSlpGraphSearchRequest) (*GetSlpGraphSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSlpGraphSearch not implemented")
}
func (*UnimplementedBchrpcServer) CheckSlpTransaction(context.Context, *CheckSlpTransactionRequest) (*CheckSlpTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSlpTransaction not implemented")
}
func (*UnimplementedBchrpcServer) SubmitTransaction(context.Context, *SubmitTransactionRequest) (*SubmitTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (*UnimplementedBchrpcServer) SubscribeTransactions(*SubscribeTransactionsRequest, Bchrpc_SubscribeTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactions not implemented")
}
func (*UnimplementedBchrpcServer) SubscribeTransactionStream(Bchrpc_SubscribeTransactionStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeTransactionStream not implemented")
}
func (*UnimplementedBchrpcServer) SubscribeBlocks(*SubscribeBlocksRequest, Bchrpc_SubscribeBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBlocks not implemented")
}

func RegisterBchrpcServer(s *grpc.Server, srv BchrpcServer) {
	s.RegisterService(&_Bchrpc_serviceDesc, srv)
}

func _Bchrpc_GetMempoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMempoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetMempoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetMempoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetMempoolInfo(ctx, req.(*GetMempoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetMempool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMempoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetMempool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetMempool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetMempool(ctx, req.(*GetMempoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetBlockchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetBlockchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetBlockchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetBlockchainInfo(ctx, req.(*GetBlockchainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetBlockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetBlockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetBlockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetBlockInfo(ctx, req.(*GetBlockInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetRawBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetRawBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetRawBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetRawBlock(ctx, req.(*GetRawBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetBlockFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetBlockFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetBlockFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetBlockFilter(ctx, req.(*GetBlockFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetHeaders(ctx, req.(*GetHeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetRawTransaction(ctx, req.(*GetRawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetAddressTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetAddressTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetAddressTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetAddressTransactions(ctx, req.(*GetAddressTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetRawAddressTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRawAddressTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetRawAddressTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetRawAddressTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetRawAddressTransactions(ctx, req.(*GetRawAddressTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetAddressUnspentOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressUnspentOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetAddressUnspentOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetAddressUnspentOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetAddressUnspentOutputs(ctx, req.(*GetAddressUnspentOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetUnspentOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnspentOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetUnspentOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetUnspentOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetUnspentOutput(ctx, req.(*GetUnspentOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetMerkleProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMerkleProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetMerkleProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetMerkleProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetMerkleProof(ctx, req.(*GetMerkleProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetSlpTokenMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlpTokenMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetSlpTokenMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetSlpTokenMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetSlpTokenMetadata(ctx, req.(*GetSlpTokenMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetSlpParsedScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlpParsedScriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetSlpParsedScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetSlpParsedScript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetSlpParsedScript(ctx, req.(*GetSlpParsedScriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetSlpTrustedValidation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlpTrustedValidationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetSlpTrustedValidation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetSlpTrustedValidation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetSlpTrustedValidation(ctx, req.(*GetSlpTrustedValidationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_GetSlpGraphSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSlpGraphSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).GetSlpGraphSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/GetSlpGraphSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).GetSlpGraphSearch(ctx, req.(*GetSlpGraphSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_CheckSlpTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSlpTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).CheckSlpTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/CheckSlpTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).CheckSlpTransaction(ctx, req.(*CheckSlpTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BchrpcServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.bchrpc/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BchrpcServer).SubmitTransaction(ctx, req.(*SubmitTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bchrpc_SubscribeTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BchrpcServer).SubscribeTransactions(m, &bchrpcSubscribeTransactionsServer{stream})
}

type Bchrpc_SubscribeTransactionsServer interface {
	Send(*TransactionNotification) error
	grpc.ServerStream
}

type bchrpcSubscribeTransactionsServer struct {
	grpc.ServerStream
}

func (x *bchrpcSubscribeTransactionsServer) Send(m *TransactionNotification) error {
	return x.ServerStream.SendMsg(m)
}

func _Bchrpc_SubscribeTransactionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BchrpcServer).SubscribeTransactionStream(&bchrpcSubscribeTransactionStreamServer{stream})
}

type Bchrpc_SubscribeTransactionStreamServer interface {
	Send(*TransactionNotification) error
	Recv() (*SubscribeTransactionsRequest, error)
	grpc.ServerStream
}

type bchrpcSubscribeTransactionStreamServer struct {
	grpc.ServerStream
}

func (x *bchrpcSubscribeTransactionStreamServer) Send(m *TransactionNotification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bchrpcSubscribeTransactionStreamServer) Recv() (*SubscribeTransactionsRequest, error) {
	m := new(SubscribeTransactionsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bchrpc_SubscribeBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BchrpcServer).SubscribeBlocks(m, &bchrpcSubscribeBlocksServer{stream})
}

type Bchrpc_SubscribeBlocksServer interface {
	Send(*BlockNotification) error
	grpc.ServerStream
}

type bchrpcSubscribeBlocksServer struct {
	grpc.ServerStream
}

func (x *bchrpcSubscribeBlocksServer) Send(m *BlockNotification) error {
	return x.ServerStream.SendMsg(m)
}

var _Bchrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.bchrpc",
	HandlerType: (*BchrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMempoolInfo",
			Handler:    _Bchrpc_GetMempoolInfo_Handler,
		},
		{
			MethodName: "GetMempool",
			Handler:    _Bchrpc_GetMempool_Handler,
		},
		{
			MethodName: "GetBlockchainInfo",
			Handler:    _Bchrpc_GetBlockchainInfo_Handler,
		},
		{
			MethodName: "GetBlockInfo",
			Handler:    _Bchrpc_GetBlockInfo_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _Bchrpc_GetBlock_Handler,
		},
		{
			MethodName: "GetRawBlock",
			Handler:    _Bchrpc_GetRawBlock_Handler,
		},
		{
			MethodName: "GetBlockFilter",
			Handler:    _Bchrpc_GetBlockFilter_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _Bchrpc_GetHeaders_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Bchrpc_GetTransaction_Handler,
		},
		{
			MethodName: "GetRawTransaction",
			Handler:    _Bchrpc_GetRawTransaction_Handler,
		},
		{
			MethodName: "GetAddressTransactions",
			Handler:    _Bchrpc_GetAddressTransactions_Handler,
		},
		{
			MethodName: "GetRawAddressTransactions",
			Handler:    _Bchrpc_GetRawAddressTransactions_Handler,
		},
		{
			MethodName: "GetAddressUnspentOutputs",
			Handler:    _Bchrpc_GetAddressUnspentOutputs_Handler,
		},
		{
			MethodName: "GetUnspentOutput",
			Handler:    _Bchrpc_GetUnspentOutput_Handler,
		},
		{
			MethodName: "GetMerkleProof",
			Handler:    _Bchrpc_GetMerkleProof_Handler,
		},
		{
			MethodName: "GetSlpTokenMetadata",
			Handler:    _Bchrpc_GetSlpTokenMetadata_Handler,
		},
		{
			MethodName: "GetSlpParsedScript",
			Handler:    _Bchrpc_GetSlpParsedScript_Handler,
		},
		{
			MethodName: "GetSlpTrustedValidation",
			Handler:    _Bchrpc_GetSlpTrustedValidation_Handler,
		},
		{
			MethodName: "GetSlpGraphSearch",
			Handler:    _Bchrpc_GetSlpGraphSearch_Handler,
		},
		{
			MethodName: "CheckSlpTransaction",
			Handler:    _Bchrpc_CheckSlpTransaction_Handler,
		},
		{
			MethodName: "SubmitTransaction",
			Handler:    _Bchrpc_SubmitTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeTransactions",
			Handler:       _Bchrpc_SubscribeTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeTransactionStream",
			Handler:       _Bchrpc_SubscribeTransactionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeBlocks",
			Handler:       _Bchrpc_SubscribeBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bchrpc.proto",
}
