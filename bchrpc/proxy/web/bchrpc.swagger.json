{
  "swagger": "2.0",
  "info": {
    "title": "bchrpc.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "bchrpc"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/CheckSlpTransaction": {
      "post": {
        "summary": "CheckSlpTransaction checks the validity of a supposed slp transaction before it is broadcasted.",
        "operationId": "bchrpc_CheckSlpTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbCheckSlpTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbCheckSlpTransactionRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetAddressTransactions": {
      "post": {
        "summary": "GetAddressTransactions returns the transactions for the given address. Offers offset,\nlimit, and from block options.",
        "description": "**Requires AddressIndex**\n**Requires SlpIndex for slp related information **",
        "operationId": "bchrpc_GetAddressTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetAddressTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetAddressTransactionsRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetAddressUnspentOutputs": {
      "post": {
        "summary": "GetAddressUnspentOutputs returns all the unspent transaction outputs\nfor the given address.",
        "description": "**Requires AddressIndex**\n**Requires SlpIndex for slp related information **",
        "operationId": "bchrpc_GetAddressUnspentOutputs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetAddressUnspentOutputsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetAddressUnspentOutputsRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetBlock": {
      "post": {
        "summary": "GetBlock returns detailed data for a block.",
        "operationId": "bchrpc_GetBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetBlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetBlockRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetBlockFilter": {
      "post": {
        "summary": "GetBlockFilter returns the compact filter (cf) of a block as a Golomb-Rice encoded set.",
        "description": "**Requires CfIndex**",
        "operationId": "bchrpc_GetBlockFilter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetBlockFilterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetBlockFilterRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetBlockHeaders": {
      "post": {
        "summary": "GetHeaders takes a block locator object and returns a batch of no more than 2000\nheaders. Upon parsing the block locator, if the server concludes there has been a\nfork, it will send headers starting at the fork point, or genesis if no blocks in\nthe locator are in the best chain. If the locator is already at the tip no headers\nwill be returned.\nsee: bchd/bchrpc/documentation/wallet_operation.md",
        "operationId": "bchrpc_GetHeaders",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetHeadersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetHeadersRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetBlockInfo": {
      "post": {
        "summary": "GetBlockInfo returns metadata and info for a specified block.",
        "operationId": "bchrpc_GetBlockInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetBlockInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetBlockInfoRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetBlockchainInfo": {
      "post": {
        "summary": "GetBlockchainInfo returns data about the blockchain including the most recent\nblock hash and height.",
        "operationId": "bchrpc_GetBlockchainInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetBlockchainInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetBlockchainInfoRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetMempool": {
      "post": {
        "summary": "GetMempool returns information about all transactions currently in the memory pool.\nOffers an option to return full transactions or just transactions hashes.",
        "operationId": "bchrpc_GetMempool",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetMempoolResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetMempoolRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetMempoolInfo": {
      "post": {
        "summary": "GetMempoolInfo returns the state of the current mempool.",
        "operationId": "bchrpc_GetMempoolInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetMempoolInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetMempoolInfoRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetMerkleProof": {
      "post": {
        "summary": "GetMerkleProof returns a Merkle (SPV) proof for a specific transaction\nin the provided block.",
        "description": "**Requires TxIndex**",
        "operationId": "bchrpc_GetMerkleProof",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetMerkleProofResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetMerkleProofRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetRawAddressTransactions": {
      "post": {
        "summary": "GetRawAddressTransactions the serialized raw transactions for\nthe given address. Offers offset, limit, and from block options.",
        "description": "**Requires AddressIndex**",
        "operationId": "bchrpc_GetRawAddressTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetRawAddressTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetRawAddressTransactionsRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetRawBlock": {
      "post": {
        "summary": "GetRawBlock returns a block in a serialized format.",
        "operationId": "bchrpc_GetRawBlock",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetRawBlockResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetRawBlockRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetRawTransaction": {
      "post": {
        "summary": "GetRawTransaction returns a serialized transaction given a transaction hash.",
        "description": "**Requires TxIndex**",
        "operationId": "bchrpc_GetRawTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetRawTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetRawTransactionRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetSlpGraphSearch": {
      "post": {
        "summary": "GraphSearch returns all the transactions needed for a client to validate an SLP graph",
        "description": "**Requires SlpIndex and SlpGraphSearch**",
        "operationId": "bchrpc_GetSlpGraphSearch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetSlpGraphSearchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetSlpGraphSearchRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetSlpParsedScript": {
      "post": {
        "summary": "GetSlpParsedScript returns marshalled object from parsing an slp pubKeyScript \nusing goslp package.  This endpoint does not require SlpIndex.",
        "operationId": "bchrpc_GetSlpParsedScript",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetSlpParsedScriptResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetSlpParsedScriptRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetSlpTokenMetadata": {
      "post": {
        "summary": "GetSlpTokenMetadata return slp token metadata for one or more tokens.",
        "description": "**Requires SlpIndex**",
        "operationId": "bchrpc_GetSlpTokenMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetSlpTokenMetadataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetSlpTokenMetadataRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetSlpTrustedValidation": {
      "post": {
        "summary": "GetSlpTrustedValidation returns slp validity related information for one or more transactions.",
        "description": "**Requires SlpIndex**",
        "operationId": "bchrpc_GetSlpTrustedValidation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetSlpTrustedValidationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetSlpTrustedValidationRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetTransaction": {
      "post": {
        "summary": "GetTransaction returns a transaction given a transaction hash.",
        "description": "**Requires TxIndex**\n**Requires SlpIndex for slp related information **",
        "operationId": "bchrpc_GetTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetTransactionRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/GetUnspentOutput": {
      "post": {
        "summary": "GetUnspentOutput takes an unspent output in the utxo set and returns\nthe utxo metadata or not found.",
        "description": "**Requires SlpIndex for slp related information **",
        "operationId": "bchrpc_GetUnspentOutput",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbGetUnspentOutputResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbGetUnspentOutputRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/SubmitTransaction": {
      "post": {
        "summary": "Submit a transaction to all connected peers.",
        "operationId": "bchrpc_SubmitTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/pbSubmitTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbSubmitTransactionRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/SubscribeBlocks": {
      "post": {
        "summary": "SubscribeBlocks creates a subscription for notifications of new blocks being\nconnected to the blockchain or blocks being disconnected.",
        "operationId": "bchrpc_SubscribeBlocks",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pbBlockNotification"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pbBlockNotification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbSubscribeBlocksRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/SubscribeTransactionStream": {
      "post": {
        "summary": "SubscribeTransactionStream subscribes to relevant transactions based on\nthe subscription requests. The parameters to filter transactions on can\nbe updated by sending new SubscribeTransactionsRequest objects on the stream.",
        "description": "NOTE: Because this RPC is using bi-directional streaming it cannot be used with\ngrpc-web.\n\n**Requires TxIndex to receive input metadata**",
        "operationId": "bchrpc_SubscribeTransactionStream",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pbTransactionNotification"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pbTransactionNotification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": " (streaming inputs)",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbSubscribeTransactionsRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    },
    "/v1/SubscribeTransactions": {
      "post": {
        "summary": "SubscribeTransactions creates subscription to all relevant transactions based on\nthe subscription filter.",
        "description": "This RPC does not use bidirectional streams and therefore can be used\nwith grpc-web. You will need to close and reopen the stream whenever\nyou want to update the subscription filter. If you are not using grpc-web\nthen SubscribeTransactionStream is more appropriate.\n\n**Requires TxIndex to receive input metadata**\n**Requires SlpIndex to receive slp input/output metadata, or SlpTokenMetadata**",
        "operationId": "bchrpc_SubscribeTransactions",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/pbTransactionNotification"
                },
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                }
              },
              "title": "Stream result of pbTransactionNotification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/pbSubscribeTransactionsRequest"
            }
          }
        ],
        "tags": [
          "bchrpc"
        ]
      }
    }
  },
  "definitions": {
    "GetBlockchainInfoResponseBitcoinNet": {
      "type": "string",
      "enum": [
        "MAINNET",
        "REGTEST",
        "TESTNET3",
        "SIMNET"
      ],
      "default": "MAINNET",
      "description": "- MAINNET: Live public network with monetary value.\n - REGTEST: An isolated environment for automated testing.\n - TESTNET3: A public environment where monetary value is agreed to be zero,\nand some checks for transaction conformity are disabled.\n - SIMNET: Private testnets for large scale simulations (or stress testing),\nwhere a specified list of nodes is used, rather than node discovery.",
      "title": "Bitcoin network types"
    },
    "GetSlpTrustedValidationRequestQuery": {
      "type": "object",
      "properties": {
        "prev_out_hash": {
          "type": "string",
          "format": "byte"
        },
        "prev_out_vout": {
          "type": "integer",
          "format": "int64"
        },
        "graphsearch_valid_hashes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "GetSlpTrustedValidationResponseValidityResult": {
      "type": "object",
      "properties": {
        "prev_out_hash": {
          "type": "string",
          "format": "byte"
        },
        "prev_out_vout": {
          "type": "integer",
          "format": "int64"
        },
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "slp_action": {
          "$ref": "#/definitions/pbSlpAction"
        },
        "token_type": {
          "$ref": "#/definitions/pbSlpTokenType"
        },
        "v1_token_amount": {
          "type": "string",
          "format": "uint64"
        },
        "v1_mint_baton": {
          "type": "boolean"
        },
        "slp_txn_opreturn": {
          "type": "string",
          "format": "byte"
        },
        "graphsearch_txn_count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "InputOutpoint": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "The hash of the transaction containing the output to be spent, little-endian"
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The index of specific output on the transaction."
        }
      }
    },
    "SlpTokenMetadataV1Fungible": {
      "type": "object",
      "properties": {
        "token_ticker": {
          "type": "string"
        },
        "token_name": {
          "type": "string"
        },
        "token_document_url": {
          "type": "string"
        },
        "token_document_hash": {
          "type": "string",
          "format": "byte"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "mint_baton_hash": {
          "type": "string",
          "format": "byte"
        },
        "mint_baton_vout": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "V1Fungible is used to marshal metadata specific to Type 1 token IDs"
    },
    "SlpTokenMetadataV1NFT1Child": {
      "type": "object",
      "properties": {
        "token_ticker": {
          "type": "string"
        },
        "token_name": {
          "type": "string"
        },
        "token_document_url": {
          "type": "string"
        },
        "token_document_hash": {
          "type": "string",
          "format": "byte"
        },
        "group_id": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "V1NFT1Child is used to marshal metadata specific to NFT1 Child token IDs"
    },
    "SlpTokenMetadataV1NFT1Group": {
      "type": "object",
      "properties": {
        "token_ticker": {
          "type": "string"
        },
        "token_name": {
          "type": "string"
        },
        "token_document_url": {
          "type": "string"
        },
        "token_document_hash": {
          "type": "string",
          "format": "byte"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "mint_baton_hash": {
          "type": "string",
          "format": "byte"
        },
        "mint_baton_vout": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "V1NFT1Group is used to marshal metadata specific to NFT1 Group token IDs"
    },
    "SlpTransactionInfoBurnFlags": {
      "type": "string",
      "enum": [
        "BURNED_INPUTS_OUTPUTS_TOO_HIGH",
        "BURNED_INPUTS_BAD_OPRETURN",
        "BURNED_INPUTS_OTHER_TOKEN",
        "BURNED_OUTPUTS_MISSING_BCH_VOUT",
        "BURNED_INPUTS_GREATER_THAN_OUTPUTS"
      ],
      "default": "BURNED_INPUTS_OUTPUTS_TOO_HIGH"
    },
    "SlpTransactionInfoValidityJudgement": {
      "type": "string",
      "enum": [
        "UNKNOWN_OR_INVALID",
        "VALID"
      ],
      "default": "UNKNOWN_OR_INVALID"
    },
    "TransactionInput": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the input, starting from zero."
        },
        "outpoint": {
          "$ref": "#/definitions/InputOutpoint",
          "description": "The related outpoint."
        },
        "signature_script": {
          "type": "string",
          "format": "byte",
          "title": "An unlocking script asserting a transaction is permitted to spend\nthe Outpoint (UTXO)"
        },
        "sequence": {
          "type": "integer",
          "format": "int64",
          "description": "As of BIP-68, the sequence number is interpreted as a relative\nlock-time for the input."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Amount in satoshi."
        },
        "previous_script": {
          "type": "string",
          "format": "byte",
          "description": "The pubkey_script of the previous output that is being spent."
        },
        "address": {
          "type": "string",
          "description": "The bitcoin addresses associated with this input."
        },
        "slp_token": {
          "$ref": "#/definitions/pbSlpToken"
        }
      }
    },
    "TransactionOutput": {
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the output, starting from zero."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The number of satoshis to be transferred."
        },
        "pubkey_script": {
          "type": "string",
          "format": "byte",
          "description": "The public key script used to pay coins."
        },
        "address": {
          "type": "string",
          "description": "The bitcoin addresses associated with this output."
        },
        "script_class": {
          "type": "string",
          "description": "The type of script."
        },
        "disassembled_script": {
          "type": "string",
          "description": "The script expressed in Bitcoin Cash Script."
        },
        "slp_token": {
          "$ref": "#/definitions/pbSlpToken"
        }
      }
    },
    "pbBlock": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/pbBlockInfo",
          "description": "Block header data, as well as metadata stored by the node."
        },
        "transaction_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbBlockTransactionData"
          },
          "description": "List of transactions or transaction hashes."
        }
      }
    },
    "pbBlockInfo": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "The double sha256 hash of the six header fields in the first 80 bytes\nof the block, when encoded according the bitcoin protocol, little-endian.\nsha256(sha256(encoded_header))"
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number, an incremental index for each block mined."
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "A version number to track software/protocol upgrades."
        },
        "previous_block": {
          "type": "string",
          "format": "byte",
          "description": "Hash of the previous block, little-endian."
        },
        "merkle_root": {
          "type": "string",
          "format": "byte",
          "description": "The root of the Merkle Tree built from all transactions in the block, little-endian."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "When mining of the block started, expressed in seconds since 1970-01-01."
        },
        "bits": {
          "type": "integer",
          "format": "int64",
          "description": "Difficulty in Compressed Target Format."
        },
        "nonce": {
          "type": "integer",
          "format": "int64",
          "description": "A random value that was generated during block mining which happened to\nresult in a computed block hash below the difficulty target at the time."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blocks in a chain, including the block itself upon creation."
        },
        "difficulty": {
          "type": "number",
          "format": "double",
          "description": "Difficulty target at time of creation."
        },
        "next_block_hash": {
          "type": "string",
          "format": "byte",
          "description": "Hash of the next block in this chain, little-endian."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "Size of the block in bytes."
        },
        "median_time": {
          "type": "string",
          "format": "int64",
          "description": "The median block time of the latest 11 block timestamps."
        }
      },
      "title": "Metadata for identifying and validating a block"
    },
    "pbBlockNotification": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/pbBlockNotificationType",
          "description": "Whether the block is connected to the chain."
        },
        "block_info": {
          "$ref": "#/definitions/pbBlockInfo",
          "description": "Marshaled block header data, as well as metadata stored by the node."
        },
        "marshaled_block": {
          "$ref": "#/definitions/pbBlock",
          "description": "A Block."
        },
        "serialized_block": {
          "type": "string",
          "format": "byte",
          "description": "Binary block, serialized using bitcoin protocol encoding."
        }
      }
    },
    "pbBlockNotificationType": {
      "type": "string",
      "enum": [
        "CONNECTED",
        "DISCONNECTED"
      ],
      "default": "CONNECTED",
      "description": "State of the block in relation to the chain."
    },
    "pbBlockTransactionData": {
      "type": "object",
      "properties": {
        "transaction_hash": {
          "type": "string",
          "format": "byte",
          "description": "Just the transaction hash, little-endian."
        },
        "transaction": {
          "$ref": "#/definitions/pbTransaction",
          "description": "A marshaled transaction."
        }
      }
    },
    "pbCheckSlpTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "string",
          "format": "byte"
        },
        "required_slp_burns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbSlpRequiredBurn"
          }
        },
        "use_spec_validity_judgement": {
          "type": "boolean",
          "description": "Using the slp specification as a basis for validity judgement can lead to confusion for new users and\nresult in accidental token burns.  use_spec_validity_judgement will cause the response's is_valid property\nto be returned according to the slp specification.  Therefore, use_spec_validity_judgement is false by\ndefault in order to avoid accidental token burns.  When use_spec_validity_judgement is false we return\ninvalid in any case which would result in a burned token, unless the burn is explicitly included as an\nitem in required_slp_burns property.\n\nWhen use_spec_validity_judgement is true, there are three cases where the is_valid response property\nwill be returned as valid, instead of invalid, as per the slp specification.  \n  1) inputs \u003e outputs\n  2) missing transaction outputs\n  3) burned inputs from other tokens\n\nrequired_slp_burns is not used when use_spec_validity_judgement is set to true."
        }
      }
    },
    "pbCheckSlpTransactionResponse": {
      "type": "object",
      "properties": {
        "is_valid": {
          "type": "boolean"
        },
        "invalid_reason": {
          "type": "string"
        },
        "best_height": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "pbGetAddressTransactionsRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address to query transactions, in lowercase cashaddr format.\nThe network prefix is optional (i.e. \"cashaddress:\")."
        },
        "nb_skip": {
          "type": "integer",
          "format": "int64",
          "description": "The number of confirmed transactions to skip, starting with the oldest first.\nDoes not affect results of unconfirmed transactions."
        },
        "nb_fetch": {
          "type": "integer",
          "format": "int64",
          "description": "Specify the number of transactions to fetch."
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "Recommended. Only get transactions after (or within) a\nstarting block identified by hash, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Recommended. Only get transactions after (or within) a\nstarting block identified by block number."
        }
      },
      "description": "Get marshaled transactions related to a specific address.\n\nRECOMMENDED:\nParameters have been provided to query without creating\n  performance issues on the node or client.\n\n- The number of transactions to skip and fetch allow for iterating\n      over a large set of transactions, if necessary.\n\n- A starting block parameter (either `hash` or `height`)\n      may then be used to filter results to those occurring\n      after a certain time.\n\nThis approach will reduce network traffic and response processing\n  for the client, as well as reduce workload on the node."
    },
    "pbGetAddressTransactionsResponse": {
      "type": "object",
      "properties": {
        "confirmed_transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbTransaction"
          },
          "description": "Transactions that have been included in a block."
        },
        "unconfirmed_transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbMempoolTransaction"
          },
          "description": "Transactions in mempool which have not been included in a block."
        }
      }
    },
    "pbGetAddressUnspentOutputsRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address to query transactions, in lowercase cashaddr format.\nThe network identifier is optional (i.e. \"cashaddress:\")."
        },
        "include_mempool": {
          "type": "boolean",
          "description": "When `include_mempool` is true, unconfirmed transactions from mempool\nare returned. Default is false."
        },
        "include_token_metadata": {
          "type": "boolean"
        }
      }
    },
    "pbGetAddressUnspentOutputsResponse": {
      "type": "object",
      "properties": {
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbUnspentOutput"
          },
          "description": "List of unspent outputs."
        },
        "token_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbSlpTokenMetadata"
          }
        }
      }
    },
    "pbGetBlockFilterRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The block hash as a byte array or base64 encoded string, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number."
        }
      }
    },
    "pbGetBlockFilterResponse": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "format": "byte",
          "description": "A compact filter matching input outpoints and public key scripts contained\nin a block (encoded according to BIP158)."
        }
      }
    },
    "pbGetBlockInfoRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The block hash as a byte array or base64 encoded string, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number."
        }
      }
    },
    "pbGetBlockInfoResponse": {
      "type": "object",
      "properties": {
        "info": {
          "$ref": "#/definitions/pbBlockInfo",
          "description": "Marshaled block header data, as well as metadata."
        }
      }
    },
    "pbGetBlockRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The block hash as a byte array or base64 encoded string, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number."
        },
        "full_transactions": {
          "type": "boolean",
          "description": "When `full_transactions` is true, full transactions are returned\ninstead of just hashes. Default is false."
        }
      }
    },
    "pbGetBlockResponse": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/pbBlock",
          "description": "A marshaled block."
        }
      }
    },
    "pbGetBlockchainInfoRequest": {
      "type": "object"
    },
    "pbGetBlockchainInfoResponse": {
      "type": "object",
      "properties": {
        "bitcoin_net": {
          "$ref": "#/definitions/GetBlockchainInfoResponseBitcoinNet",
          "description": "Which network the node is operating on."
        },
        "best_height": {
          "type": "integer",
          "format": "int32",
          "description": "The current number of blocks on the longest chain."
        },
        "best_block_hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the best (tip) block in the most-work fully-validated chain, little-endian."
        },
        "difficulty": {
          "type": "number",
          "format": "double",
          "description": "Threshold for adding new blocks."
        },
        "median_time": {
          "type": "string",
          "format": "int64",
          "description": "Median time of the last 11 blocks."
        },
        "tx_index": {
          "type": "boolean",
          "description": "When `tx_index` is true, the node has full transaction index enabled."
        },
        "addr_index": {
          "type": "boolean",
          "description": "When `addr_index` is true, the node has address index enabled and may\nbe used with call related by address."
        },
        "slp_index": {
          "type": "boolean",
          "description": "When `slp_index` is true, the node has the slp index enabled and may\nbe used with slp related rpc methods and also causes slp metadata to be added\nin some of the existing rpc methods."
        },
        "slp_graphsearch": {
          "type": "boolean",
          "title": "When `slp_graphsearch` is true, the node is able to handle calls to slp graph search"
        }
      }
    },
    "pbGetHeadersRequest": {
      "type": "object",
      "properties": {
        "block_locator_hashes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "A list of block hashes known to the client (most recent first) which\nis exponentially sparser toward the genesis block (0), little-endian.\nCommon practice is to include all of the last 10 blocks, and then\n9 blocks for each order of ten thereafter."
        },
        "stop_hash": {
          "type": "string",
          "format": "byte",
          "description": "hash of the latest desired block header, little-endian; only blocks\noccurring before the stop will be returned."
        }
      },
      "description": "Request headers using a list of known block hashes."
    },
    "pbGetHeadersResponse": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbBlockInfo"
          },
          "description": "List of block headers."
        }
      }
    },
    "pbGetMempoolInfoRequest": {
      "type": "object"
    },
    "pbGetMempoolInfoResponse": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "format": "int64",
          "title": "The count of transactions in the mempool"
        },
        "bytes": {
          "type": "integer",
          "format": "int64",
          "title": "The size in bytes of all transactions in the mempool"
        }
      }
    },
    "pbGetMempoolRequest": {
      "type": "object",
      "properties": {
        "full_transactions": {
          "type": "boolean",
          "description": "When `full_transactions` is true, full transaction data is provided\ninstead of just transaction hashes. Default is false."
        }
      }
    },
    "pbGetMempoolResponse": {
      "type": "object",
      "properties": {
        "transaction_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbGetMempoolResponseTransactionData"
          },
          "description": "List of unconfirmed transactions."
        }
      }
    },
    "pbGetMempoolResponseTransactionData": {
      "type": "object",
      "properties": {
        "transaction_hash": {
          "type": "string",
          "format": "byte",
          "description": "The transaction hash, little-endian."
        },
        "transaction": {
          "$ref": "#/definitions/pbTransaction",
          "description": "The transaction data."
        }
      }
    },
    "pbGetMerkleProofRequest": {
      "type": "object",
      "properties": {
        "transaction_hash": {
          "type": "string",
          "format": "byte",
          "description": "A transaction hash, little-endian."
        }
      }
    },
    "pbGetMerkleProofResponse": {
      "type": "object",
      "properties": {
        "block": {
          "$ref": "#/definitions/pbBlockInfo",
          "title": "Block header information for the corresponding transaction"
        },
        "hashes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "A list containing the transaction hash, the adjacent leaf transaction hash\nand the hashes of the highest nodes in the merkle tree not built with the transaction.\nProof hashes are ordered following transaction order, or left to right on the merkle tree"
        },
        "flags": {
          "type": "string",
          "format": "byte",
          "description": "Binary representing the location of the matching transaction in the full merkle tree,\nstarting with the root (`1`) at position/level 0, where `1` corresponds\nto a left branch and `01` is a right branch."
        }
      }
    },
    "pbGetRawAddressTransactionsRequest": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "description": "The address to query transactions, in lowercase cashaddr format.\nThe network prefix is optional (i.e. \"cashaddress:\")."
        },
        "nb_skip": {
          "type": "integer",
          "format": "int64",
          "description": "The number of confirmed transactions to skip, starting with the oldest first.\nDoes not affect results of unconfirmed transactions."
        },
        "nb_fetch": {
          "type": "integer",
          "format": "int64",
          "description": "Specify the number of transactions to fetch."
        },
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "Recommended. Only return transactions after some starting block\nidentified by hash, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "Recommended. Only return transactions after some starting block\nidentified by block number."
        }
      },
      "description": "Get encoded transactions related to a specific address.\n\nRECOMMENDED:\nParameters have been provided to query without creating\n  performance issues on the node or client.\n\n- The number of transactions to skip and fetch allow for iterating\n      over a large set of transactions, if necessary.\n\n- A starting block parameter (either `hash` or `height`)\n      may then be used to filter results to those occurring\n      after a certain time.\n\nThis approach will reduce network traffic and response processing\n  for the client, as well as reduce workload on the node."
    },
    "pbGetRawAddressTransactionsResponse": {
      "type": "object",
      "properties": {
        "confirmed_transactions": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Transactions that have been included in a block."
        },
        "unconfirmed_transactions": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Transactions in mempool which have not been included in a block."
        }
      }
    },
    "pbGetRawBlockRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The block hash as a byte array or base64 encoded string, little-endian."
        },
        "height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number."
        }
      }
    },
    "pbGetRawBlockResponse": {
      "type": "object",
      "properties": {
        "block": {
          "type": "string",
          "format": "byte",
          "description": "Raw block data (with header) serialized according the the bitcoin block protocol."
        }
      }
    },
    "pbGetRawTransactionRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "A transaction hash, little-endian."
        }
      },
      "description": "Get an encoded transaction from a transaction hash."
    },
    "pbGetRawTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "Raw transaction in bytes."
        }
      }
    },
    "pbGetSlpGraphSearchRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte"
        },
        "valid_hashes": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "pbGetSlpGraphSearchResponse": {
      "type": "object",
      "properties": {
        "txdata": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "pbGetSlpParsedScriptRequest": {
      "type": "object",
      "properties": {
        "slp_opreturn_script": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "pbGetSlpParsedScriptResponse": {
      "type": "object",
      "properties": {
        "parsing_error": {
          "type": "string"
        },
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "slp_action": {
          "$ref": "#/definitions/pbSlpAction"
        },
        "token_type": {
          "$ref": "#/definitions/pbSlpTokenType"
        },
        "v1_genesis": {
          "$ref": "#/definitions/pbSlpV1GenesisMetadata"
        },
        "v1_mint": {
          "$ref": "#/definitions/pbSlpV1MintMetadata"
        },
        "v1_send": {
          "$ref": "#/definitions/pbSlpV1SendMetadata"
        },
        "v1_nft1_child_genesis": {
          "$ref": "#/definitions/pbSlpV1Nft1ChildGenesisMetadata"
        },
        "v1_nft1_child_send": {
          "$ref": "#/definitions/pbSlpV1Nft1ChildSendMetadata"
        }
      }
    },
    "pbGetSlpTokenMetadataRequest": {
      "type": "object",
      "properties": {
        "token_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          }
        }
      }
    },
    "pbGetSlpTokenMetadataResponse": {
      "type": "object",
      "properties": {
        "token_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbSlpTokenMetadata"
          }
        }
      }
    },
    "pbGetSlpTrustedValidationRequest": {
      "type": "object",
      "properties": {
        "queries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSlpTrustedValidationRequestQuery"
          }
        },
        "include_graphsearch_count": {
          "type": "boolean"
        }
      }
    },
    "pbGetSlpTrustedValidationResponse": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GetSlpTrustedValidationResponseValidityResult"
          }
        }
      }
    },
    "pbGetTransactionRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "A transaction hash, little-endian."
        },
        "include_token_metadata": {
          "type": "boolean"
        }
      },
      "description": "Get a transaction from a transaction hash."
    },
    "pbGetTransactionResponse": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/pbTransaction",
          "description": "A marshaled transaction."
        },
        "token_metadata": {
          "$ref": "#/definitions/pbSlpTokenMetadata"
        }
      }
    },
    "pbGetUnspentOutputRequest": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "The hash of the transaction, little-endian."
        },
        "index": {
          "type": "integer",
          "format": "int64",
          "description": "The number of the output, starting from zero."
        },
        "include_mempool": {
          "type": "boolean",
          "description": "When include_mempool is true, unconfirmed transactions from mempool\nare returned. Default is false."
        },
        "include_token_metadata": {
          "type": "boolean"
        }
      }
    },
    "pbGetUnspentOutputResponse": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/InputOutpoint",
          "description": "A reference to the related input."
        },
        "pubkey_script": {
          "type": "string",
          "format": "byte",
          "title": "Locking script dictating how funds can be spent in the future"
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "Amount in satoshi."
        },
        "is_coinbase": {
          "type": "boolean",
          "title": "When is_coinbase is true, the transaction was the first in a block,\ncreated by a miner, and used to pay the block reward"
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "The index number of the block containing the transaction creating the output."
        },
        "slp_token": {
          "$ref": "#/definitions/pbSlpToken"
        },
        "token_metadata": {
          "$ref": "#/definitions/pbSlpTokenMetadata"
        }
      }
    },
    "pbMempoolTransaction": {
      "type": "object",
      "properties": {
        "transaction": {
          "$ref": "#/definitions/pbTransaction"
        },
        "added_time": {
          "type": "string",
          "format": "int64",
          "description": "The time when the transaction was added too the pool."
        },
        "added_height": {
          "type": "integer",
          "format": "int32",
          "description": "The block height when the transaction was added to the pool."
        },
        "fee": {
          "type": "string",
          "format": "int64",
          "description": "The total fee in satoshi the transaction pays."
        },
        "fee_per_kb": {
          "type": "string",
          "format": "int64",
          "description": "The fee in satoshi per kilobyte the transaction pays."
        },
        "starting_priority": {
          "type": "number",
          "format": "double",
          "description": "The priority of the transaction when it was added to the pool."
        }
      }
    },
    "pbSlpAction": {
      "type": "string",
      "enum": [
        "NON_SLP",
        "NON_SLP_BURN",
        "SLP_PARSE_ERROR",
        "SLP_UNSUPPORTED_VERSION",
        "SLP_V1_GENESIS",
        "SLP_V1_MINT",
        "SLP_V1_SEND",
        "SLP_V1_NFT1_GROUP_GENESIS",
        "SLP_V1_NFT1_GROUP_MINT",
        "SLP_V1_NFT1_GROUP_SEND",
        "SLP_V1_NFT1_UNIQUE_CHILD_GENESIS",
        "SLP_V1_NFT1_UNIQUE_CHILD_SEND"
      ],
      "default": "NON_SLP",
      "description": "SlpAction is used to allow clients to identify the type of slp transaction from this single field.\n\nNOTE: All enum types except for \"NON_SLP\" may be annotated with one or more BurnFlags."
    },
    "pbSlpRequiredBurn": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/InputOutpoint"
        },
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "token_type": {
          "$ref": "#/definitions/pbSlpTokenType"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "mint_baton_vout": {
          "type": "integer",
          "format": "int64"
        }
      },
      "title": "SlpRequiredBurn is used by clients to allow token burning"
    },
    "pbSlpToken": {
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "is_mint_baton": {
          "type": "boolean"
        },
        "address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "slp_action": {
          "$ref": "#/definitions/pbSlpAction"
        },
        "token_type": {
          "$ref": "#/definitions/pbSlpTokenType"
        }
      },
      "description": "WARNING: Some languages (e.g., JavaScript) may not properly handle the 'uint64'\nfor large amounts. For this reason, an annotation has been added for JS to\nreturn a string for the amount field instead of casting uint64 to the JS 'number'\ntype. Other languages may require similar treatment.",
      "title": "SlpToken info used in transaction inputs / outputs"
    },
    "pbSlpTokenMetadata": {
      "type": "object",
      "properties": {
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "token_type": {
          "$ref": "#/definitions/pbSlpTokenType"
        },
        "v1_fungible": {
          "$ref": "#/definitions/SlpTokenMetadataV1Fungible"
        },
        "v1_nft1_group": {
          "$ref": "#/definitions/SlpTokenMetadataV1NFT1Group"
        },
        "v1_nft1_child": {
          "$ref": "#/definitions/SlpTokenMetadataV1NFT1Child"
        }
      },
      "title": "SlpTokenMetadata is used to marshal metadata about a specific TokenID"
    },
    "pbSlpTokenType": {
      "type": "string",
      "enum": [
        "VERSION_NOT_SET",
        "V1_FUNGIBLE",
        "V1_NFT1_CHILD",
        "V1_NFT1_GROUP"
      ],
      "default": "VERSION_NOT_SET"
    },
    "pbSlpTransactionInfo": {
      "type": "object",
      "properties": {
        "slp_action": {
          "$ref": "#/definitions/pbSlpAction"
        },
        "validity_judgement": {
          "$ref": "#/definitions/SlpTransactionInfoValidityJudgement"
        },
        "parse_error": {
          "type": "string"
        },
        "token_id": {
          "type": "string",
          "format": "byte"
        },
        "burn_flags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SlpTransactionInfoBurnFlags"
          }
        },
        "v1_genesis": {
          "$ref": "#/definitions/pbSlpV1GenesisMetadata"
        },
        "v1_mint": {
          "$ref": "#/definitions/pbSlpV1MintMetadata"
        },
        "v1_send": {
          "$ref": "#/definitions/pbSlpV1SendMetadata"
        },
        "v1_nft1_child_genesis": {
          "$ref": "#/definitions/pbSlpV1Nft1ChildGenesisMetadata"
        },
        "v1_nft1_child_send": {
          "$ref": "#/definitions/pbSlpV1Nft1ChildSendMetadata"
        }
      },
      "description": "SlpTransactionInfo is used inside the Transaction message type."
    },
    "pbSlpV1GenesisMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte"
        },
        "ticker": {
          "type": "string",
          "format": "byte"
        },
        "document_url": {
          "type": "string",
          "format": "byte"
        },
        "document_hash": {
          "type": "string",
          "format": "byte"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "mint_baton_vout": {
          "type": "integer",
          "format": "int64"
        },
        "mint_amount": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "SlpV1GenesisMetadata is used to marshal type 1 and NFT1 Group GENESIS OP_RETURN scriptPubKey"
    },
    "pbSlpV1MintMetadata": {
      "type": "object",
      "properties": {
        "mint_baton_vout": {
          "type": "integer",
          "format": "int64"
        },
        "mint_amount": {
          "type": "string",
          "format": "uint64"
        }
      },
      "title": "SlpV1MintMetadata is used to marshal type 1 MINT OP_RETURN scriptPubKey"
    },
    "pbSlpV1Nft1ChildGenesisMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "format": "byte"
        },
        "ticker": {
          "type": "string",
          "format": "byte"
        },
        "document_url": {
          "type": "string",
          "format": "byte"
        },
        "document_hash": {
          "type": "string",
          "format": "byte"
        },
        "decimals": {
          "type": "integer",
          "format": "int64"
        },
        "group_token_id": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "SlpV1Nft1ChildGenesisMetadata is used to marshal NFT1 Child GENESIS OP_RETURN scriptPubKey"
    },
    "pbSlpV1Nft1ChildSendMetadata": {
      "type": "object",
      "properties": {
        "group_token_id": {
          "type": "string",
          "format": "byte"
        }
      },
      "title": "SlpV1Nft1ChildSendMetadata is used to marshal NFT1 Child SEND OP_RETURN scriptPubKey"
    },
    "pbSlpV1SendMetadata": {
      "type": "object",
      "properties": {
        "amounts": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uint64"
          }
        }
      },
      "title": "SlpV1SendMetadata is used to marshal type 1 and NFT1 Group SEND OP_RETURN scriptPubKey"
    },
    "pbSubmitTransactionRequest": {
      "type": "object",
      "properties": {
        "transaction": {
          "type": "string",
          "format": "byte",
          "description": "The encoded transaction."
        },
        "skip_slp_validity_check": {
          "type": "boolean"
        },
        "required_slp_burns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pbSlpRequiredBurn"
          }
        }
      }
    },
    "pbSubmitTransactionResponse": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "description": "Transaction hash, little-endian."
        }
      }
    },
    "pbSubscribeBlocksRequest": {
      "type": "object",
      "properties": {
        "full_block": {
          "type": "boolean",
          "description": "When full_block is true, a complete marshaled block is sent. See `Block`.\nDefault is false, block metadata is sent. See `BlockInfo`."
        },
        "full_transactions": {
          "type": "boolean",
          "description": "When full_transactions is true, provide full transaction info\nfor a marshaled block.\nDefault is false, only the transaction hashes are included for\na marshaled block. See `TransactionData`."
        },
        "serialize_block": {
          "type": "boolean",
          "title": "When serialize_block is true, blocks are serialized using bitcoin protocol encoding.\nDefault is false, block will be Marshaled (see `BlockInfo` and `BlockNotification`)"
        }
      },
      "description": "- BlockInfo (block metadata): `BlockInfo`\n     - SubscribeBlocksRequest {}\n\n - Marshaled Block (with transaction hashes): `Block`\n     - SubscribeBlocksRequest {\n           full_block = true\n       }\n - Marshaled Block (with full transaction data): `Block`\n     - SubscribeBlocksRequest {\n           full_block = true\n           full_transactions = true\n       }\n - Serialized Block acccording to bitcoin protocol encoding: `bytes`\n     - SubscribeBlocksRequest {\n           serialize_block = true\n       }",
      "title": "Options to define data structure to be sent by SubscribeBlock stream:"
    },
    "pbSubscribeTransactionsRequest": {
      "type": "object",
      "properties": {
        "subscribe": {
          "$ref": "#/definitions/pbTransactionFilter",
          "title": "Subscribe to a filter. add items to a filter"
        },
        "unsubscribe": {
          "$ref": "#/definitions/pbTransactionFilter",
          "title": "Unsubscribe to a filter, remove items from a filter"
        },
        "include_mempool": {
          "type": "boolean",
          "description": "When include_mempool is true, new unconfirmed transactions from mempool are\nincluded apart from the ones confirmed in a block."
        },
        "include_in_block": {
          "type": "boolean",
          "description": "When include_in_block is true, transactions are included when they are confirmed.\nThis notification is sent in addition to any requested mempool notifications."
        },
        "serialize_tx": {
          "type": "boolean",
          "title": "When serialize_tx is true, transactions are serialized using\nbitcoin protocol encoding. Default is false, transaction will be Marshaled\n(see `Transaction`, `MempoolTransaction` and `TransactionNotification`)"
        }
      },
      "description": "Request to subscribe or unsubscribe from a stream of transactions."
    },
    "pbTransaction": {
      "type": "object",
      "properties": {
        "hash": {
          "type": "string",
          "format": "byte",
          "title": "The double sha256 hash of the encoded transaction, little-endian.\nsha256(sha256(encoded_transaction))"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "description": "The version of the transaction format."
        },
        "inputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionInput"
          },
          "description": "List of inputs."
        },
        "outputs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionOutput"
          },
          "description": "List of outputs."
        },
        "lock_time": {
          "type": "integer",
          "format": "int64",
          "description": "The block height or timestamp after which this transaction is allowed.\nIf value is greater than 500 million, it is assumed to be an epoch timestamp,\notherwise it is treated as a block-height. Default is zero, or lock."
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "description": "The size of the transaction in bytes."
        },
        "timestamp": {
          "type": "string",
          "format": "int64",
          "description": "When the transaction was included in a block, in epoch time."
        },
        "confirmations": {
          "type": "integer",
          "format": "int32",
          "description": "Number of blocks including proof of the transaction, including\nthe block it appeared."
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "Number of the block containing the transaction."
        },
        "block_hash": {
          "type": "string",
          "format": "byte",
          "description": "Hash of the block the transaction was recorded in, little-endian."
        },
        "slp_transaction_info": {
          "$ref": "#/definitions/pbSlpTransactionInfo"
        }
      }
    },
    "pbTransactionFilter": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Filter by address(es)"
        },
        "outpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InputOutpoint"
          },
          "description": "Filter by output hash and index."
        },
        "data_elements": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "description": "Filter by data elements contained in pubkey scripts."
        },
        "all_transactions": {
          "type": "boolean",
          "description": "Subscribed/Unsubscribe to everything. Other filters\nwill be ignored."
        },
        "all_slp_transactions": {
          "type": "boolean",
          "title": "Subscribed/Unsubscribe to everything slp. Other filters\nwill be ignored, except this filter will be overriden by all_transactions=true"
        },
        "slp_token_ids": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "byte"
          },
          "title": "only transactions associated with the included tokenIds"
        }
      }
    },
    "pbTransactionNotification": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/pbTransactionNotificationType",
          "description": "Whether or not the transaction has been included in a block."
        },
        "confirmed_transaction": {
          "$ref": "#/definitions/pbTransaction",
          "description": "A transaction included in a block."
        },
        "unconfirmed_transaction": {
          "$ref": "#/definitions/pbMempoolTransaction",
          "description": "A transaction in mempool."
        },
        "serialized_transaction": {
          "type": "string",
          "format": "byte",
          "description": "Binary transaction, serialized using bitcoin protocol encoding."
        }
      }
    },
    "pbTransactionNotificationType": {
      "type": "string",
      "enum": [
        "UNCONFIRMED",
        "CONFIRMED"
      ],
      "default": "UNCONFIRMED",
      "description": "State of the transaction acceptance.\n\n - UNCONFIRMED: A transaction in mempool.\n - CONFIRMED: A transaction in a block."
    },
    "pbUnspentOutput": {
      "type": "object",
      "properties": {
        "outpoint": {
          "$ref": "#/definitions/InputOutpoint",
          "description": "A reference to the output given by transaction hash and index."
        },
        "pubkey_script": {
          "type": "string",
          "format": "byte",
          "description": "The public key script used to pay coins."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "title": "The amount in satoshis"
        },
        "is_coinbase": {
          "type": "boolean",
          "description": "When is_coinbase is true, the output is the first in the block,\na generation transaction, the result of mining."
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "description": "The block number containing the UXTO."
        },
        "slp_token": {
          "$ref": "#/definitions/pbSlpToken"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
